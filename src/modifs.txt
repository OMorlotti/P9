diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..897d05b
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,7 @@
+language: java
+jdk: openjdk8
+
+script:
+  - jdk_switcher use openjdk8
+  - mvn clean package
+  - mvn sonar:sonar
diff --git a/myerp-business/pom.xml b/myerp-business/pom.xml
new file mode 100644
index 0000000..cfc00b8
--- /dev/null
+++ b/myerp-business/pom.xml
@@ -0,0 +1,172 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <!-- =============================================================== -->
+    <!-- Project informations -->
+    <!-- =============================================================== -->
+    <!-- ===== Parent ===== -->
+    <parent>
+        <groupId>com.dummy.myerp</groupId>
+        <artifactId>myerp</artifactId>
+        <version>1.x.x-SNAPSHOT</version>
+        <relativePath>..</relativePath>
+    </parent>
+
+    <!-- ===== Maven ===== -->
+    <artifactId>myerp-business</artifactId>
+
+    <!-- ===== General information ===== -->
+    <name>${project.artifactId}</name>
+
+
+    <!-- =============================================================== -->
+    <!-- Distrubution management -->
+    <!-- =============================================================== -->
+    <distributionManagement>
+        <site>
+            <id>site</id>
+            <name>site-doc</name>
+            <url>file://${basedir}/../target/site-doc/${project.artifactId}/</url>
+        </site>
+    </distributionManagement>
+
+
+    <!-- =============================================================== -->
+    <!-- Properties -->
+    <!-- =============================================================== -->
+    <properties>
+    </properties>
+
+
+    <!-- =============================================================== -->
+    <!-- Dependencies -->
+    <!-- =============================================================== -->
+    <dependencies>
+        <dependency>
+            <groupId>javax.xml.bind</groupId>
+            <artifactId>jaxb-api</artifactId>
+            <version>2.2.11</version>
+        </dependency>
+        <dependency>
+            <groupId>com.sun.xml.bind</groupId>
+            <artifactId>jaxb-core</artifactId>
+            <version>2.2.11</version>
+        </dependency>
+        <dependency>
+            <groupId>com.sun.xml.bind</groupId>
+            <artifactId>jaxb-impl</artifactId>
+            <version>2.2.11</version>
+        </dependency>
+        <dependency>
+            <groupId>javax.activation</groupId>
+            <artifactId>activation</artifactId>
+            <version>1.1.1</version>
+        </dependency>
+        <!-- ===== Modules ===== -->
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>myerp-model</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>myerp-consumer</artifactId>
+        </dependency>
+
+        <!-- ===== Spring JDBC/Tx ===== -->
+        <!-- spring-tx : transaction, JCA, DAO -->
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-tx</artifactId>
+        </dependency>
+
+        <!-- ===== JSR 303 - Bean validation ===== -->
+        <!-- implementation -->
+        <dependency>
+            <groupId>org.hibernate</groupId>
+            <artifactId>hibernate-validator</artifactId>
+        </dependency>
+
+
+        <!-- ========== Test Dependencies ========== -->
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <version>3.9.0</version>
+            <scope>test</scope>
+        </dependency>
+        <!-- ===== Database (pour les tests) ===== -->
+        <!-- Pool de connexion -->
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-dbcp2</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <!-- Drivers JDBC PostgreSQL -->
+        <dependency>
+            <groupId>org.postgresql</groupId>
+            <artifactId>postgresql</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+
+    <!-- =============================================================== -->
+    <!-- Profiles -->
+    <!-- =============================================================== -->
+    <profiles>
+        <!-- Profile utilisé pour lancer les tests d'intégration de la couche Business -->
+        <profile>
+            <id>test-business</id>
+            <build>
+                <plugins>
+                    <!-- Ajout du répertoire src/test-business/java en tant que source de test du module -->
+                    <plugin>
+                        <groupId>org.codehaus.mojo</groupId>
+                        <artifactId>build-helper-maven-plugin</artifactId>
+                        <executions>
+                            <execution>
+                                <id>add-test-source</id>
+                                <phase>generate-test-sources</phase>
+                                <goals>
+                                    <goal>add-test-source</goal>
+                                </goals>
+                                <configuration>
+                                    <sources>
+                                        <source>src/test-business/java</source>
+                                    </sources>
+                                </configuration>
+                            </execution>
+                        </executions>
+                    </plugin>
+                </plugins>
+                <testResources>
+                    <testResource>
+                        <directory>src/test/resources</directory>
+                    </testResource>
+                    <testResource>
+                        <directory>src/test-business/resources</directory>
+                    </testResource>
+                </testResources>
+            </build>
+        </profile>
+    </profiles>
+
+
+    <!-- =============================================================== -->
+    <!-- Build -->
+    <!-- =============================================================== -->
+    <build>
+    </build>
+</project>
diff --git a/myerp-business/src/main/java/com/dummy/myerp/business/contrat/BusinessProxy.java b/myerp-business/src/main/java/com/dummy/myerp/business/contrat/BusinessProxy.java
new file mode 100644
index 0000000..beac275
--- /dev/null
+++ b/myerp-business/src/main/java/com/dummy/myerp/business/contrat/BusinessProxy.java
@@ -0,0 +1,19 @@
+package com.dummy.myerp.business.contrat;
+
+import com.dummy.myerp.business.contrat.manager.ComptabiliteManager;
+
+
+/**
+ * <p>Interface du Proxy d'accès à la couche Business</p>
+ */
+public interface BusinessProxy {
+
+    // ==================== Managers ====================
+
+    /**
+     * Renvoie le manager du package Comptabilite.
+     *
+     * @return ComptabiliteManager
+     */
+    ComptabiliteManager getComptabiliteManager();
+}
diff --git a/myerp-business/src/main/java/com/dummy/myerp/business/contrat/manager/ComptabiliteManager.java b/myerp-business/src/main/java/com/dummy/myerp/business/contrat/manager/ComptabiliteManager.java
new file mode 100644
index 0000000..03c9324
--- /dev/null
+++ b/myerp-business/src/main/java/com/dummy/myerp/business/contrat/manager/ComptabiliteManager.java
@@ -0,0 +1,85 @@
+package com.dummy.myerp.business.contrat.manager;
+
+import java.util.List;
+
+import com.dummy.myerp.model.bean.CompteComptable;
+import com.dummy.myerp.model.bean.EcritureComptable;
+import com.dummy.myerp.model.bean.JournalComptable;
+import com.dummy.myerp.technical.exception.FunctionalException;
+
+
+/**
+ * Interface du manager du package comptabilite.
+ */
+public interface ComptabiliteManager {
+
+    /**
+     * Renvoie la liste des comptes comptables.
+     *
+     * @return {@link List}
+     */
+    List<CompteComptable> getListCompteComptable();
+
+
+    /**
+     * Renvoie la liste des journaux comptables.
+     *
+     * @return {@link List}
+     */
+    List<JournalComptable> getListJournalComptable();
+
+
+    /**
+     * Renvoie la liste des écritures comptables.
+     *
+     * @return {@link List}
+     */
+    List<EcritureComptable> getListEcritureComptable();
+
+    /**
+     * Ajoute une référence à l'écriture comptable.
+     *
+     * <strong>RG_Compta_5 : </strong>
+     * La référence d'une écriture comptable est composée du code du journal dans lequel figure l'écriture
+     * suivi de l'année et d'un numéro de séquence (propre à chaque journal) sur 5 chiffres incrémenté automatiquement
+     * à chaque écriture. Le formatage de la référence est : XX-AAAA/#####.
+     * <br>
+     * Ex : Journal de banque (BQ), écriture au 31/12/2016
+     * <pre>BQ-2016/00001</pre>
+     *
+     * <p><strong>Attention :</strong> l'écriture n'est pas enregistrée en persistance</p>
+     * @param pEcritureComptable L'écriture comptable concernée
+     */
+    void associateReference(EcritureComptable pEcritureComptable);
+
+    /**
+     * Vérifie que l'Ecriture comptable respecte les règles de gestion.
+     *
+     * @param pEcritureComptable -
+     * @throws FunctionalException Si l'Ecriture comptable ne respecte pas les règles de gestion
+     */
+    void checkEcritureComptable(EcritureComptable pEcritureComptable) throws FunctionalException;
+
+    /**
+     * Insert une nouvelle écriture comptable.
+     *
+     * @param pEcritureComptable -
+     * @throws FunctionalException Si l'Ecriture comptable ne respecte pas les règles de gestion
+     */
+    void insertEcritureComptable(EcritureComptable pEcritureComptable) throws FunctionalException;
+
+    /**
+     * Met à jour l'écriture comptable.
+     *
+     * @param pEcritureComptable -
+     * @throws FunctionalException Si l'Ecriture comptable ne respecte pas les règles de gestion
+     */
+    void updateEcritureComptable(EcritureComptable pEcritureComptable) throws FunctionalException;
+
+    /**
+     * Supprime l'écriture comptable d'id {@code pId}.
+     *
+     * @param pId l'id de l'écriture
+     */
+    void deleteEcritureComptable(Integer pId);
+}
diff --git a/myerp-business/src/main/java/com/dummy/myerp/business/impl/AbstractBusinessManager.java b/myerp-business/src/main/java/com/dummy/myerp/business/impl/AbstractBusinessManager.java
new file mode 100644
index 0000000..46808ea
--- /dev/null
+++ b/myerp-business/src/main/java/com/dummy/myerp/business/impl/AbstractBusinessManager.java
@@ -0,0 +1,86 @@
+package com.dummy.myerp.business.impl;
+
+import javax.validation.Configuration;
+import javax.validation.Validation;
+import javax.validation.Validator;
+import javax.validation.ValidatorFactory;
+
+import com.dummy.myerp.business.contrat.BusinessProxy;
+import com.dummy.myerp.consumer.dao.contrat.DaoProxy;
+
+
+/**
+ * <p>Classe mère des Managers</p>
+ */
+public abstract class AbstractBusinessManager {
+
+    /** Le Proxy d'accès à la couche Business */
+    private static BusinessProxy businessProxy;
+    /** Le Proxy d'accès à la couche Consumer-DAO */
+    private static DaoProxy daoProxy;
+    /** Le gestionnaire de Transaction */
+    private static TransactionManager transactionManager;
+
+
+    // ==================== Constructeurs ====================
+
+    /**
+     * Méthode de configuration de la classe
+     *
+     * @param pBusinessProxy      -
+     * @param pDaoProxy           -
+     * @param pTransactionManager -
+     */
+    public static void configure(BusinessProxy pBusinessProxy,
+                                 DaoProxy pDaoProxy,
+                                 TransactionManager pTransactionManager) {
+        businessProxy = pBusinessProxy;
+        daoProxy = pDaoProxy;
+        transactionManager = pTransactionManager;
+    }
+
+
+    // ==================== Getters/Setters ====================
+
+    /**
+     * Renvoie le Proxy d'accès à la couche Business
+     *
+     * @return {@link BusinessProxy}
+     */
+    protected BusinessProxy getBusinessProxy() {
+        return businessProxy;
+    }
+
+
+    /**
+     * Renvoie le Proxy d'accès à la couche Consumer-DAO
+     *
+     * @return {@link DaoProxy}
+     */
+    protected DaoProxy getDaoProxy() {
+        return daoProxy;
+    }
+
+
+    /**
+     * Renvoie le gestionnaire de Transaction
+     *
+     * @return TransactionManager
+     */
+    protected TransactionManager getTransactionManager() {
+        return transactionManager;
+    }
+
+
+    /**
+     * Renvoie un {@link Validator} de contraintes
+     *
+     * @return Validator
+     */
+    protected Validator getConstraintValidator() {
+        Configuration<?> vConfiguration = Validation.byDefaultProvider().configure();
+        ValidatorFactory vFactory = vConfiguration.buildValidatorFactory();
+        Validator vValidator = vFactory.getValidator();
+        return vValidator;
+    }
+}
diff --git a/myerp-business/src/main/java/com/dummy/myerp/business/impl/BusinessProxyImpl.java b/myerp-business/src/main/java/com/dummy/myerp/business/impl/BusinessProxyImpl.java
new file mode 100644
index 0000000..208e5ea
--- /dev/null
+++ b/myerp-business/src/main/java/com/dummy/myerp/business/impl/BusinessProxyImpl.java
@@ -0,0 +1,67 @@
+package com.dummy.myerp.business.impl;
+
+import com.dummy.myerp.business.contrat.BusinessProxy;
+import com.dummy.myerp.business.contrat.manager.ComptabiliteManager;
+import com.dummy.myerp.business.impl.manager.ComptabiliteManagerImpl;
+import com.dummy.myerp.consumer.dao.contrat.DaoProxy;
+
+
+/**
+ * <p>Implémentation du Proxy d'accès à la couche Business.</p>
+ */
+public class BusinessProxyImpl implements BusinessProxy {
+
+    // ==================== Attributs Static ====================
+    /** Le Proxy d'accès à la couche Consumer-DAO */
+    private static DaoProxy daoProxy;
+
+
+    // ==================== Attributs ====================
+    /** The Comptabilite manager. */
+    private ComptabiliteManager comptabiliteManager = new ComptabiliteManagerImpl();
+
+
+    // ==================== Constructeurs ====================
+    /** Instance unique de la classe (design pattern Singleton) */
+    private static final BusinessProxyImpl INSTANCE = new BusinessProxyImpl();
+
+    /**
+     * Renvoie l'instance unique de la classe (design pattern Singleton).
+     *
+     * @return {@link BusinessProxyImpl}
+     */
+    protected static BusinessProxyImpl getInstance() {
+        if (daoProxy == null) {
+            throw new UnsatisfiedLinkError("La classe BusinessProxyImpl n'a pas été initialisée.");
+        }
+        return BusinessProxyImpl.INSTANCE;
+    }
+
+    /**
+     * Renvoie l'instance unique de la classe (design pattern Singleton).
+     *
+     * @param pDaoProxy -
+     * @param pTransactionManager -
+     * @return {@link BusinessProxyImpl}
+     */
+    public static BusinessProxyImpl getInstance(DaoProxy pDaoProxy,
+                                                TransactionManager pTransactionManager) {
+        daoProxy = pDaoProxy;
+        AbstractBusinessManager.configure(BusinessProxyImpl.INSTANCE, pDaoProxy, pTransactionManager);
+        return BusinessProxyImpl.INSTANCE;
+    }
+
+    /**
+     * Constructeur.
+     */
+    protected BusinessProxyImpl() {
+        super();
+    }
+
+
+    // ==================== Getters/Setters ====================
+    @Override
+    public ComptabiliteManager getComptabiliteManager() {
+        return comptabiliteManager;
+    }
+}
diff --git a/myerp-business/src/main/java/com/dummy/myerp/business/impl/TransactionManager.java b/myerp-business/src/main/java/com/dummy/myerp/business/impl/TransactionManager.java
new file mode 100644
index 0000000..ce2d12c
--- /dev/null
+++ b/myerp-business/src/main/java/com/dummy/myerp/business/impl/TransactionManager.java
@@ -0,0 +1,86 @@
+package com.dummy.myerp.business.impl;
+
+import org.springframework.transaction.PlatformTransactionManager;
+import org.springframework.transaction.TransactionDefinition;
+import org.springframework.transaction.TransactionStatus;
+import org.springframework.transaction.support.DefaultTransactionDefinition;
+
+/**
+ * <p>Classe de gestion des Transactions de persistance</p>
+ */
+public class TransactionManager {
+
+    // ==================== Attributs Static ====================
+    /** PlatformTransactionManager pour le DataSource MyERP */
+    private static PlatformTransactionManager ptmMyERP;
+
+
+    // ==================== Constructeurs ====================
+    /** Instance unique de la classe (design pattern Singleton) */
+    private static final TransactionManager INSTANCE = new TransactionManager();
+    /**
+     * Renvoie l'instance unique de la classe (design pattern Singleton).
+     *
+     * @return {@link TransactionManager}
+     */
+    public static TransactionManager getInstance() {
+        return TransactionManager.INSTANCE;
+    }
+    /**
+     * Renvoie l'instance unique de la classe (design pattern Singleton).
+     *
+     * @param pPtmMyERP -
+     * @return {@link TransactionManager}
+     */
+    public static TransactionManager getInstance(PlatformTransactionManager pPtmMyERP) {
+        ptmMyERP = pPtmMyERP;
+        return TransactionManager.INSTANCE;
+    }
+    /**
+     * Constructeur.
+     */
+    protected TransactionManager() {
+        super();
+    }
+
+
+    // ==================== Méthodes ====================
+    /**
+     * Démarre une transaction sur le DataSource MyERP
+     *
+     * @return TransactionStatus à passer aux méthodes :
+     *      <ul>
+     *          <li>{@link #commitMyERP(TransactionStatus)}</li>
+     *              <li>{@link #rollbackMyERP(TransactionStatus)}</li>
+     *      </ul>
+     */
+    public TransactionStatus beginTransactionMyERP() {
+        DefaultTransactionDefinition vTDef = new DefaultTransactionDefinition();
+        vTDef.setName("Transaction_txManagerMyERP");
+        vTDef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
+
+        return ptmMyERP.getTransaction(vTDef);
+    }
+
+    /**
+     * Commit la transaction sur le DataSource MyERP
+     *
+     * @param pTStatus retrouné par la méthode {@link #beginTransactionMyERP()}
+     */
+    public void commitMyERP(TransactionStatus pTStatus) {
+        if (pTStatus != null) {
+            ptmMyERP.commit(pTStatus);
+        }
+    }
+
+    /**
+     * Rollback la transaction sur le DataSource MyERP
+     *
+     * @param pTStatus retrouné par la méthode {@link #beginTransactionMyERP()}
+     */
+    public void rollbackMyERP(TransactionStatus pTStatus) {
+        if (pTStatus != null) {
+            ptmMyERP.rollback(pTStatus);
+        }
+    }
+}
diff --git a/myerp-business/src/main/java/com/dummy/myerp/business/impl/manager/ComptabiliteManagerImpl.java b/myerp-business/src/main/java/com/dummy/myerp/business/impl/manager/ComptabiliteManagerImpl.java
new file mode 100644
index 0000000..479f33f
--- /dev/null
+++ b/myerp-business/src/main/java/com/dummy/myerp/business/impl/manager/ComptabiliteManagerImpl.java
@@ -0,0 +1,304 @@
+package com.dummy.myerp.business.impl.manager;
+
+import java.math.BigDecimal;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import javax.validation.ConstraintViolation;
+import javax.validation.ConstraintViolationException;
+
+import com.dummy.myerp.model.bean.*;
+import org.apache.commons.lang3.ObjectUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.springframework.transaction.TransactionStatus;
+import com.dummy.myerp.business.contrat.manager.ComptabiliteManager;
+import com.dummy.myerp.business.impl.AbstractBusinessManager;
+import com.dummy.myerp.technical.exception.FunctionalException;
+import com.dummy.myerp.technical.exception.NotFoundException;
+
+
+/**
+ * Comptabilite manager implementation.
+ */
+public class ComptabiliteManagerImpl extends AbstractBusinessManager implements ComptabiliteManager {
+
+    // ==================== Attributs ====================
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Instantiates a new Comptabilite manager.
+     */
+    public ComptabiliteManagerImpl() {
+    }
+
+
+    // ==================== Getters/Setters ====================
+    @Override
+    public List<CompteComptable> getListCompteComptable() {
+        return getDaoProxy().getComptabiliteDao().getListCompteComptable();
+    }
+
+
+    @Override
+    public List<JournalComptable> getListJournalComptable() {
+        return getDaoProxy().getComptabiliteDao().getListJournalComptable();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public List<EcritureComptable> getListEcritureComptable() {
+        return getDaoProxy().getComptabiliteDao().getListEcritureComptable();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    // TODO à tester
+    @Override
+    public synchronized void associateReference(EcritureComptable pEcritureComptable) {
+        // Bien se réferer à la JavaDoc de cette méthode !
+        /* Le principe :
+                1.  Remonter depuis la persistance la dernière valeur de la séquence du journal pour l'année de l'écriture
+                    (table sequence_ecriture_comptable)
+                2.  * S'il n'y a aucun enregistrement pour le journal pour l'année concernée :
+                        1. Utiliser le numéro 1.
+                    * Sinon :
+                        1. Utiliser la dernière valeur + 1
+                3.  Mettre à jour la référence de l'écriture avec la référence calculée (RG_Compta_5)
+                4.  Enregistrer (insert/update) la valeur de la séquence en persistance
+                    (table sequence_ecriture_comptable)
+         */
+
+        //1.
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTime(pEcritureComptable.getDate());
+
+        int year = calendar.get(Calendar.YEAR);
+
+        SequenceEcritureComptable derniereSequenceComptable;
+
+        try
+        {
+            derniereSequenceComptable = getDaoProxy().getComptabiliteDao().getSequenceEcritureComptable(pEcritureComptable.getJournal().getCode(), year);
+        }
+        catch(NotFoundException e)
+        {
+            derniereSequenceComptable = null;
+        }
+
+        //2.
+        int nouvelleValeur;
+
+        if (derniereSequenceComptable == null)
+        {
+            nouvelleValeur = 1;
+            derniereSequenceComptable = new SequenceEcritureComptable( year, nouvelleValeur);
+        }
+        else
+        {
+            nouvelleValeur = derniereSequenceComptable.getDerniereValeur() + 1;
+            derniereSequenceComptable.setDerniereValeur(nouvelleValeur);
+        }
+
+        //3.
+        String reference = pEcritureComptable.getJournal().getCode() + "-" + year + "/" + String.format("%05d", nouvelleValeur);
+
+        pEcritureComptable.setReference(reference);
+
+        //4.
+        if (derniereSequenceComptable == null)
+        {
+            getDaoProxy().getComptabiliteDao().insertSequenceEcritureComptable(derniereSequenceComptable);
+        }
+        else
+        {
+            getDaoProxy().getComptabiliteDao().updateSequenceEcritureComptable(derniereSequenceComptable);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    // TODO à tester
+    @Override
+    public void checkEcritureComptable(EcritureComptable pEcritureComptable) throws FunctionalException {
+        this.checkEcritureComptableUnit(pEcritureComptable);
+        this.checkEcritureComptableContext(pEcritureComptable);
+    }
+
+
+    /**
+     * Vérifie que l'Ecriture comptable respecte les règles de gestion unitaires,
+     * c'est à dire indépendemment du contexte (unicité de la référence, exercie comptable non cloturé...)
+     *
+     * @param pEcritureComptable -
+     * @throws FunctionalException Si l'Ecriture comptable ne respecte pas les règles de gestion
+     */
+    // TODO tests à compléter
+    protected void checkEcritureComptableUnit(EcritureComptable pEcritureComptable) throws FunctionalException {
+        // ===== Vérification des contraintes unitaires sur les attributs de l'écriture
+        Set<ConstraintViolation<EcritureComptable>> vViolations = getConstraintValidator().validate(pEcritureComptable);
+        if (!vViolations.isEmpty()) {
+            throw new FunctionalException("L'écriture comptable ne respecte pas les règles de gestion.",
+                                          new ConstraintViolationException(
+                                              "L'écriture comptable ne respecte pas les contraintes de validation",
+                                              vViolations));
+        }
+
+        // ===== RG_Compta_2 : Pour qu'une écriture comptable soit valide, elle doit être équilibrée
+        if (!pEcritureComptable.isEquilibree()) {
+            throw new FunctionalException("L'écriture comptable n'est pas équilibrée.");
+        }
+
+        // ===== RG_Compta_3 : une écriture comptable doit avoir au moins 2 lignes d'écriture (1 au débit, 1 au crédit)
+        int vNbrCredit = 0;
+        int vNbrDebit = 0;
+        for (LigneEcritureComptable vLigneEcritureComptable : pEcritureComptable.getListLigneEcriture()) {
+            if (BigDecimal.ZERO.compareTo(ObjectUtils.defaultIfNull(vLigneEcritureComptable.getCredit(),
+                                                                    BigDecimal.ZERO)) != 0) {
+                vNbrCredit++;
+            }
+            if (BigDecimal.ZERO.compareTo(ObjectUtils.defaultIfNull(vLigneEcritureComptable.getDebit(),
+                                                                    BigDecimal.ZERO)) != 0) {
+                vNbrDebit++;
+            }
+        }
+        // On test le nombre de lignes car si l'écriture à une seule ligne
+        //      avec un montant au débit et un montant au crédit ce n'est pas valable
+        if (pEcritureComptable.getListLigneEcriture().size() < 2
+            || vNbrCredit < 1
+            || vNbrDebit < 1) {
+            throw new FunctionalException(
+                "L'écriture comptable doit avoir au moins deux lignes : une ligne au débit et une ligne au crédit.");
+        }
+
+        // ===== RG_Compta_5 : Format et contenu de la référence
+        // vérifier que l'année dans la référence correspond bien à la date de l'écriture, idem pour le code journal...
+
+        String reference = pEcritureComptable.getReference();
+
+        if(reference != null)
+        {
+            Pattern pattern = Pattern.compile(EcritureComptable.REFERENCE_PATTERN);
+
+            Matcher m = pattern.matcher(reference);
+
+            if(m.find())
+            {
+                Calendar calendar = Calendar.getInstance();
+                calendar.setTime(pEcritureComptable.getDate());
+
+                int annee1 = calendar.get(Calendar.YEAR);
+
+                String journalCode = m.group(1);
+                String annee2 = m.group(2);
+
+                if(!journalCode.equals(pEcritureComptable.getJournal().getCode()))
+                {
+                    throw new FunctionalException(
+                        "Le code journal ne correspond pas"
+                    );
+                }
+                if(annee1 != Integer.parseInt(annee2))
+                {
+                    throw new FunctionalException(
+                        "L'année ne correspond pas"
+                    );
+                }
+            }
+            else
+            {
+                throw new FunctionalException(
+                    "Format de référence invalide"
+                );
+            }
+        }
+        else
+        {
+            throw new FunctionalException(
+                "Référence non spécifiée"
+            );
+        }
+    }
+
+
+    /**
+     * Vérifie que l'Ecriture comptable respecte les règles de gestion liées au contexte
+     * (unicité de la référence, année comptable non cloturé...)
+     *
+     * @param pEcritureComptable -
+     * @throws FunctionalException Si l'Ecriture comptable ne respecte pas les règles de gestion
+     */
+    protected void checkEcritureComptableContext(EcritureComptable pEcritureComptable) throws FunctionalException {
+        // ===== RG_Compta_6 : La référence d'une écriture comptable doit être unique
+        if (StringUtils.isNoneEmpty(pEcritureComptable.getReference())) {
+            try {
+                // Recherche d'une écriture ayant la même référence
+                EcritureComptable vECRef = getDaoProxy().getComptabiliteDao().getEcritureComptableByRef(
+                    pEcritureComptable.getReference());
+
+                // Si l'écriture à vérifier est une nouvelle écriture (id == null),
+                // ou si elle ne correspond pas à l'écriture trouvée (id != idECRef),
+                // c'est qu'il y a déjà une autre écriture avec la même référence
+                if (pEcritureComptable.getId() == null
+                    || !pEcritureComptable.getId().equals(vECRef.getId())) {
+                    throw new FunctionalException("Une autre écriture comptable existe déjà avec la même référence.");
+                }
+            } catch (NotFoundException vEx) {
+                // Dans ce cas, c'est bon, ça veut dire qu'on n'a aucune autre écriture avec la même référence.
+            }
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void insertEcritureComptable(EcritureComptable pEcritureComptable) throws FunctionalException {
+        this.checkEcritureComptable(pEcritureComptable);
+        TransactionStatus vTS = getTransactionManager().beginTransactionMyERP();
+        try {
+            getDaoProxy().getComptabiliteDao().insertEcritureComptable(pEcritureComptable);
+            getTransactionManager().commitMyERP(vTS);
+            vTS = null;
+        } finally {
+            getTransactionManager().rollbackMyERP(vTS);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void updateEcritureComptable(EcritureComptable pEcritureComptable) throws FunctionalException {
+        TransactionStatus vTS = getTransactionManager().beginTransactionMyERP();
+        try {
+            getDaoProxy().getComptabiliteDao().updateEcritureComptable(pEcritureComptable);
+            getTransactionManager().commitMyERP(vTS);
+            vTS = null;
+        } finally {
+            getTransactionManager().rollbackMyERP(vTS);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void deleteEcritureComptable(Integer pId) {
+        TransactionStatus vTS = getTransactionManager().beginTransactionMyERP();
+        try {
+            getDaoProxy().getComptabiliteDao().deleteEcritureComptable(pId);
+            getTransactionManager().commitMyERP(vTS);
+            vTS = null;
+        } finally {
+            getTransactionManager().rollbackMyERP(vTS);
+        }
+    }
+}
diff --git a/myerp-business/src/main/resources/com/dummy/myerp/business/applicationContext.xml b/myerp-business/src/main/resources/com/dummy/myerp/business/applicationContext.xml
new file mode 100644
index 0000000..bc7737b
--- /dev/null
+++ b/myerp-business/src/main/resources/com/dummy/myerp/business/applicationContext.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns="http://www.springframework.org/schema/beans"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
+
+    <!-- ====================   Business-Proxy   ==================== -->
+
+    <!-- BusinessProxy -->
+    <bean id="BusinessProxy"
+          class="com.dummy.myerp.business.impl.BusinessProxyImpl"
+          scope="singleton"
+          factory-method="getInstance">
+        <constructor-arg ref="DaoProxy"/>
+        <constructor-arg ref="TransactionManager"/>
+    </bean>
+
+
+    <!-- ========== Transaction Managers ========== -->
+    <import resource="transactionContext.xml"/>
+</beans>
diff --git a/myerp-business/src/main/resources/com/dummy/myerp/business/transactionContext.xml b/myerp-business/src/main/resources/com/dummy/myerp/business/transactionContext.xml
new file mode 100644
index 0000000..87c5abf
--- /dev/null
+++ b/myerp-business/src/main/resources/com/dummy/myerp/business/transactionContext.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns="http://www.springframework.org/schema/beans"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
+
+    <!-- Transaction Manager -->
+    <bean id="TransactionManager"
+          class="com.dummy.myerp.business.impl.TransactionManager"
+          scope="singleton"
+          factory-method="getInstance">
+        <constructor-arg ref="txManagerMYERP"/>
+    </bean>
+
+
+    <!-- PlatformTransactionManager pour le DataSource MYERP -->
+    <bean id="txManagerMYERP" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
+        <property name="dataSource" ref="dataSourceMYERP"/>
+    </bean>
+</beans>
diff --git a/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/BusinessTestCase.java b/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/BusinessTestCase.java
new file mode 100644
index 0000000..4073b48
--- /dev/null
+++ b/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/BusinessTestCase.java
@@ -0,0 +1,40 @@
+package com.dummy.myerp.testbusiness.business;
+
+
+import com.dummy.myerp.business.contrat.BusinessProxy;
+import com.dummy.myerp.business.impl.TransactionManager;
+
+
+/**
+ * Classe mère des classes de test d'intégration de la couche Business
+ */
+public abstract class BusinessTestCase {
+
+    static {
+        SpringRegistry.init();
+    }
+
+    /** {@link BusinessProxy} */
+    private static final BusinessProxy BUSINESS_PROXY = SpringRegistry.getBusinessProxy();
+
+    /** {@link TransactionManager} */
+    private static final TransactionManager TRANSACTION_MANAGER = SpringRegistry.getTransactionManager();
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Constructeur.
+     */
+    public BusinessTestCase() {
+    }
+
+
+    // ==================== Getters/Setters ====================
+    public static BusinessProxy getBusinessProxy() {
+        return BUSINESS_PROXY;
+    }
+
+    public static TransactionManager getTransactionManager() {
+        return TRANSACTION_MANAGER;
+    }
+}
diff --git a/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/MyErpIntegrationTest.java b/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/MyErpIntegrationTest.java
new file mode 100644
index 0000000..92d0661
--- /dev/null
+++ b/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/MyErpIntegrationTest.java
@@ -0,0 +1,104 @@
+package com.dummy.myerp.testbusiness.business;
+
+import com.dummy.myerp.business.impl.manager.ComptabiliteManagerImpl;
+import com.dummy.myerp.model.bean.CompteComptable;
+import com.dummy.myerp.model.bean.EcritureComptable;
+import com.dummy.myerp.model.bean.JournalComptable;
+import com.dummy.myerp.model.bean.LigneEcritureComptable;
+import com.dummy.myerp.technical.exception.FunctionalException;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.math.BigDecimal;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.List;
+
+public class MyErpIntegrationTest extends BusinessTestCase
+{
+	private ComptabiliteManagerImpl comptabiliteManager = new ComptabiliteManagerImpl();
+
+	@Test
+	public void getListCompteComptableTest()
+	{
+		List<CompteComptable> compteComptableList = comptabiliteManager.getListCompteComptable();
+		Assert.assertFalse(compteComptableList.isEmpty());
+	}
+
+	@Test
+	public void getListEcritureComptableTest()
+	{
+		List<EcritureComptable> ecritureComptableList = comptabiliteManager.getListEcritureComptable();
+		Assert.assertFalse(ecritureComptableList.isEmpty());
+	}
+
+	@Test
+	public void getListJournalComptable()
+	{
+		List<JournalComptable> journalComptableList = comptabiliteManager.getListJournalComptable();
+		Assert.assertFalse(journalComptableList.isEmpty());
+	}
+
+
+	@Test
+	public void ecritureComptable() throws FunctionalException
+	{
+		EcritureComptable vEcritureComptable = new EcritureComptable();
+
+		vEcritureComptable.setJournal(new JournalComptable("AC", "Achats"));
+		vEcritureComptable.setDate((new Date()));
+		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy");
+		String yearRef = simpleDateFormat.format(vEcritureComptable.getDate());
+
+		vEcritureComptable.setReference("AC-" + yearRef + "/0001");
+		vEcritureComptable.setLibelle("Libellé");
+		vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+			null, new BigDecimal(123), null));
+		vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(2),
+			null, null, new BigDecimal(123)));
+
+		comptabiliteManager.checkEcritureComptable(vEcritureComptable);
+	}
+
+	@Test
+	public void insertEcritureComptableReturnNoError() throws FunctionalException
+	{
+		EcritureComptable vEcrirureComptable = new EcritureComptable();
+		vEcrirureComptable.setJournal(new JournalComptable("VE", "Vente"));
+		vEcrirureComptable.setReference("VE-2021/00007");
+		vEcrirureComptable.setDate(new Date());
+		vEcrirureComptable.setLibelle("Test intégration vente");
+
+		vEcrirureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(411),
+			null, new BigDecimal(123), null));
+		vEcrirureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(706),
+			null, null, new BigDecimal(123)));
+
+		comptabiliteManager.insertEcritureComptable(vEcrirureComptable);
+
+		List<CompteComptable> ecritureComptableList = comptabiliteManager.getListCompteComptable();
+
+		BigDecimal vRetour = BigDecimal.ZERO.setScale(2, BigDecimal.ROUND_HALF_UP);
+		vRetour = vRetour.add(new BigDecimal(123));
+
+		for (EcritureComptable ecritureComptable = ecritureComptableList)
+		{
+			if (ecritureComptable.getReference().equals("VE-2021/00007"))
+			{
+				Assert.assertEquals(ecritureComptable.getLibelle(),"Test intégration vente");
+
+				for (LigneEcritureComptable ligneEcritureComptable = ecritureComptable.getListLigneEcriture())
+				{
+					if (ligneEcritureComptable.getCredit() != null)
+					{
+						Assert.assertEquals(ligneEcritureComptable.getCredit(), vRetour);
+					}
+					if(ligneEcritureComptable.getDebit() != null)
+					{
+						Assert.assertEquals(ligneEcritureComptable.getDebit(), vRetour);
+					}
+				}
+			}
+		}
+	}
+}
\ No newline at end of file
diff --git a/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/SpringRegistry.java b/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/SpringRegistry.java
new file mode 100644
index 0000000..7134806
--- /dev/null
+++ b/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/SpringRegistry.java
@@ -0,0 +1,96 @@
+package com.dummy.myerp.testbusiness.business;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.support.ClassPathXmlApplicationContext;
+import com.dummy.myerp.business.contrat.BusinessProxy;
+import com.dummy.myerp.business.impl.TransactionManager;
+
+
+/**
+ * Registre des Beans Spring.
+ */
+public final class SpringRegistry {
+
+    /** Logger Log4j pour la classe */
+    private static final Logger LOGGER = LogManager.getLogger(SpringRegistry.class);
+
+
+    /** Instance unique de la classe (design pattern Singleton) */
+    private static final SpringRegistry INSTANCE = new SpringRegistry();
+
+
+    /** Nom des fichiers de contexte de l'application */
+    private static final String CONTEXT_APPLI_LOCATION
+        = "classpath:/com/dummy/myerp/testbusiness/business/applicationContext.xml";
+
+    /** Le context spring de l'application */
+    private ApplicationContext contextAppli;
+
+
+    // ==================== ID des Beans Spring ====================
+
+
+    /**
+     * Constructeur.
+     */
+    private SpringRegistry() {
+        super();
+        SpringRegistry.LOGGER.debug("[DEBUT] SpringRegistry() - Initialisation du contexte Spring");
+        this.contextAppli = new ClassPathXmlApplicationContext(SpringRegistry.CONTEXT_APPLI_LOCATION);
+        SpringRegistry.LOGGER.debug("[FIN] SpringRegistry() - Initialisation du contexte Spring");
+    }
+
+    /**
+     * Renvoie l'instance unique de la classe (design pattern Singleton).
+     *
+     * @return SpringRegistry
+     */
+    protected static final SpringRegistry getInstance() {
+        return SpringRegistry.INSTANCE;
+    }
+
+    /**
+     * Initialise et charge le contexte Spring
+     *
+     * @return ApplicationContext
+     */
+    public static final ApplicationContext init() {
+        // le fait d'appeler cette méthode, déclanche l'appel des initialisation static et donc le chargement du context
+        return getInstance().contextAppli;
+    }
+
+    /**
+     * Récupération d'un bean via Spring.
+     *
+     * @param pBeanId ID du bean
+     * @return Object
+     */
+    protected static Object getBean(String pBeanId) {
+        SpringRegistry.LOGGER.debug("[DEBUT] SpringRegistry.getBean() - Bean ID : " + pBeanId);
+        Object vBean = SpringRegistry.getInstance().contextAppli.getBean(pBeanId);
+        SpringRegistry.LOGGER.debug("[FIN] SpringRegistry.getBean() - Bean ID : " + pBeanId);
+        return vBean;
+    }
+
+
+    /**
+     * Renvoie l'instance de {@link BusinessProxy} de l'application
+     *
+     * @return {@link BusinessProxy}
+     */
+    public static BusinessProxy getBusinessProxy() {
+        return (BusinessProxy) SpringRegistry.getBean("BusinessProxy");
+    }
+
+
+    /**
+     * Renvoie l'instance de {@link TransactionManager} de l'application
+     *
+     * @return {@link TransactionManager}
+     */
+    public static TransactionManager getTransactionManager() {
+        return (TransactionManager) SpringRegistry.getBean("TransactionManager");
+    }
+}
diff --git a/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/TestInitSpring.java b/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/TestInitSpring.java
new file mode 100644
index 0000000..362ba56
--- /dev/null
+++ b/myerp-business/src/test-business/java/com/dummy/myerp/testbusiness/business/TestInitSpring.java
@@ -0,0 +1,30 @@
+package com.dummy.myerp.testbusiness.business;
+
+import org.junit.Test;
+
+import static org.junit.Assert.assertNotNull;
+
+
+/**
+ * Classe de test de l'initialisation du contexte Spring
+ */
+public class TestInitSpring extends BusinessTestCase {
+
+    /**
+     * Constructeur.
+     */
+    public TestInitSpring() {
+        super();
+    }
+
+
+    /**
+     * Teste l'initialisation du contexte Spring
+     */
+    @Test
+    public void testInit() {
+        SpringRegistry.init();
+        assertNotNull(SpringRegistry.getBusinessProxy());
+        assertNotNull(SpringRegistry.getTransactionManager());
+    }
+}
diff --git a/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/applicationContext.xml b/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/applicationContext.xml
new file mode 100644
index 0000000..f9b0ecf
--- /dev/null
+++ b/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/applicationContext.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns="http://www.springframework.org/schema/beans"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
+
+    <import resource="classpath:/com/dummy/myerp/business/applicationContext.xml" />
+
+    <import resource="classpath:/com/dummy/myerp/business/transactionContext.xml" />
+
+    <import resource="classpath:/com/dummy/myerp/consumer/applicationContext.xml" />
+
+    <import resource="classpath:/com/dummy/myerp/testbusiness/business/dataSourceContext.xml" />
+
+</beans>
diff --git a/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/dataSourceContext.xml b/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/dataSourceContext.xml
new file mode 100644
index 0000000..e676357
--- /dev/null
+++ b/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/dataSourceContext.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
+
+    <context:property-placeholder location="classpath:/com/dummy/myerp/testbusiness/business/database.properties"/>
+
+    <bean id="dataSourceMYERP" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
+        <property name="driverClassName" value="${myerp.datasource.driver}"/>
+        <property name="url" value="${myerp.datasource.url}"/>
+        <property name="username" value="${myerp.datasource.username}"/>
+        <property name="password" value="${myerp.datasource.password}"/>
+    </bean>
+
+</beans>
diff --git a/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/database.properties b/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/database.properties
new file mode 100644
index 0000000..2be3093
--- /dev/null
+++ b/myerp-business/src/test-business/resources/com/dummy/myerp/testbusiness/business/database.properties
@@ -0,0 +1,4 @@
+myerp.datasource.driver=org.postgresql.Driver
+myerp.datasource.url=jdbc:postgresql://nas.odier.xyz:5432/myerp
+myerp.datasource.username=myerp
+myerp.datasource.password=myerp
diff --git a/myerp-business/src/test/java/com/dummy/myerp/business/impl/manager/ComptabiliteManagerImplTest.java b/myerp-business/src/test/java/com/dummy/myerp/business/impl/manager/ComptabiliteManagerImplTest.java
new file mode 100644
index 0000000..2edc972
--- /dev/null
+++ b/myerp-business/src/test/java/com/dummy/myerp/business/impl/manager/ComptabiliteManagerImplTest.java
@@ -0,0 +1,182 @@
+package com.dummy.myerp.business.impl.manager;
+
+import java.math.BigDecimal;
+import java.util.Calendar;
+import java.util.Date;
+
+import com.dummy.myerp.business.contrat.BusinessProxy;
+import com.dummy.myerp.business.impl.TransactionManager;
+import com.dummy.myerp.consumer.dao.contrat.ComptabiliteDao;
+import com.dummy.myerp.consumer.dao.contrat.DaoProxy;
+import org.junit.Before;
+import org.junit.Test;
+import com.dummy.myerp.model.bean.CompteComptable;
+import com.dummy.myerp.model.bean.EcritureComptable;
+import com.dummy.myerp.model.bean.JournalComptable;
+import com.dummy.myerp.model.bean.LigneEcritureComptable;
+import com.dummy.myerp.technical.exception.FunctionalException;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import static org.mockito.Mockito.when;
+
+@RunWith(MockitoJUnitRunner.class)
+public class ComptabiliteManagerImplTest {
+
+    private ComptabiliteManagerImpl manager = new ComptabiliteManagerImpl();
+
+    @Mock
+    private BusinessProxy businessProxy;
+
+    @Mock
+    DaoProxy daoProxy;
+
+    @Mock
+    private TransactionManager transactionManager;
+
+    @Mock
+    ComptabiliteDao comptabiliteDao;
+
+    @Before
+    public void init()
+    {
+        ComptabiliteManagerImpl.configure(businessProxy, daoProxy, transactionManager);
+
+        when(daoProxy.getComptabiliteDao()).thenReturn(comptabiliteDao);
+    }
+
+    @Test
+    public void checkEcritureComptableUnit() throws Exception {
+        EcritureComptable vEcritureComptable;
+        vEcritureComptable = new EcritureComptable();
+
+        vEcritureComptable.setJournal(new JournalComptable("AC", "Achat"));
+        vEcritureComptable.setDate(new Date());
+        vEcritureComptable.setLibelle("Libelle");
+        vEcritureComptable.setReference("AC-" + Calendar.getInstance().get(Calendar.YEAR) + "/00001");
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+                                                                                 null, new BigDecimal(123),
+                                                                                 null));
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(2),
+                                                                                 null, null,
+                                                                                 new BigDecimal(123)));
+        manager.checkEcritureComptableUnit(vEcritureComptable);
+    }
+
+    @Test(expected = FunctionalException.class)
+    public void checkEcritureComptableUnitRG5BadJournal() throws Exception {
+        EcritureComptable vEcritureComptable;
+        vEcritureComptable = new EcritureComptable();
+
+        vEcritureComptable.setJournal(new JournalComptable("AC", "Achat"));
+        vEcritureComptable.setDate(new Date());
+        vEcritureComptable.setLibelle("Libelle");
+        vEcritureComptable.setReference("VE-" + Calendar.getInstance().get(Calendar.YEAR) + "/00001");
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+            null, new BigDecimal(123),
+            null));
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(2),
+            null, null,
+            new BigDecimal(123)));
+        manager.checkEcritureComptableUnit(vEcritureComptable);
+    }
+
+    @Test(expected = FunctionalException.class)
+    public void checkEcritureComptableUnitRG5BadYear() throws Exception {
+        EcritureComptable vEcritureComptable;
+        vEcritureComptable = new EcritureComptable();
+
+        vEcritureComptable.setJournal(new JournalComptable("AC", "Achat"));
+        vEcritureComptable.setDate(new Date());
+        vEcritureComptable.setLibelle("Libelle");
+        vEcritureComptable.setReference("AC-" + (Calendar.getInstance().get(Calendar.YEAR) + 1) + "/00001");
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+            null, new BigDecimal(123),
+            null));
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(2),
+            null, null,
+            new BigDecimal(123)));
+        manager.checkEcritureComptableUnit(vEcritureComptable);
+    }
+
+    @Test(expected = FunctionalException.class)
+    public void checkEcritureComptableUnitRG5TooLong() throws Exception {
+        EcritureComptable vEcritureComptable;
+        vEcritureComptable = new EcritureComptable();
+
+        vEcritureComptable.setJournal(new JournalComptable("AC", "Achat"));
+        vEcritureComptable.setDate(new Date());
+        vEcritureComptable.setLibelle("Libelle");
+        vEcritureComptable.setReference("AC-" + Calendar.getInstance().get(Calendar.YEAR) + "/000001");
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+            null, new BigDecimal(123),
+            null));
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(2),
+            null, null,
+            new BigDecimal(123)));
+        manager.checkEcritureComptableUnit(vEcritureComptable);
+    }
+
+    @Test(expected = FunctionalException.class)
+    public void checkEcritureComptableUnitViolation() throws Exception {
+        EcritureComptable vEcritureComptable;
+        vEcritureComptable = new EcritureComptable();
+
+        manager.checkEcritureComptableUnit(vEcritureComptable);
+    }
+
+    @Test(expected = FunctionalException.class)
+    public void checkEcritureComptableUnitRG2() throws Exception {
+        EcritureComptable vEcritureComptable;
+        vEcritureComptable = new EcritureComptable();
+
+        vEcritureComptable.setJournal(new JournalComptable("AC", "Achat"));
+        vEcritureComptable.setDate(new Date());
+        vEcritureComptable.setLibelle("Libelle");
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+                                                                                 null, new BigDecimal(123),
+                                                                                 null));
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(2),
+                                                                                 null, null,
+                                                                                 new BigDecimal(1234)));
+        manager.checkEcritureComptableUnit(vEcritureComptable);
+    }
+
+    @Test(expected = FunctionalException.class)
+    public void checkEcritureComptableUnitRG3() throws Exception {
+        EcritureComptable vEcritureComptable;
+        vEcritureComptable = new EcritureComptable();
+
+        vEcritureComptable.setJournal(new JournalComptable("AC", "Achat"));
+        vEcritureComptable.setDate(new Date());
+        vEcritureComptable.setLibelle("Libelle");
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+                                                                                 null, new BigDecimal(123),
+                                                                                 null));
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+                                                                                 null, new BigDecimal(123),
+                                                                                 null));
+        manager.checkEcritureComptableUnit(vEcritureComptable);
+    }
+
+    @Test
+    public void associateReferenceUnit() throws Exception {
+        EcritureComptable vEcritureComptable;
+        vEcritureComptable = new EcritureComptable();
+
+        vEcritureComptable.setJournal(new JournalComptable("AC", "Achat"));
+        vEcritureComptable.setDate(new Date());
+        vEcritureComptable.setLibelle("Libelle");
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(1),
+            null, new BigDecimal(123),
+            null));
+        vEcritureComptable.getListLigneEcriture().add(new LigneEcritureComptable(new CompteComptable(2),
+            null, null,
+            new BigDecimal(123)));
+
+        manager.associateReference(vEcritureComptable);
+
+        manager.checkEcritureComptableUnit(vEcritureComptable);
+    }
+}
diff --git a/myerp-business/src/test/resources/log4j2.xml b/myerp-business/src/test/resources/log4j2.xml
new file mode 100644
index 0000000..f698685
--- /dev/null
+++ b/myerp-business/src/test/resources/log4j2.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration xmlns="http://logging.apache.org/log4j/2.0/config">
+    <Appenders>
+        <Console name="console" target="SYSTEM_OUT">
+            <PatternLayout pattern="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
+        </Console>
+    </Appenders>
+    <Loggers>
+        <Root level="ERROR">
+            <AppenderRef ref="console"/>
+        </Root>
+    </Loggers>
+</Configuration>
diff --git a/myerp-consumer/pom.xml b/myerp-consumer/pom.xml
new file mode 100644
index 0000000..6f10222
--- /dev/null
+++ b/myerp-consumer/pom.xml
@@ -0,0 +1,133 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <!-- =============================================================== -->
+    <!-- Project informations -->
+    <!-- =============================================================== -->
+    <!-- ===== Parent ===== -->
+    <parent>
+        <groupId>com.dummy.myerp</groupId>
+        <artifactId>myerp</artifactId>
+        <version>1.x.x-SNAPSHOT</version>
+        <relativePath>..</relativePath>
+    </parent>
+
+    <!-- ===== Maven ===== -->
+    <artifactId>myerp-consumer</artifactId>
+
+    <!-- ===== General information ===== -->
+    <name>${project.artifactId}</name>
+
+
+    <!-- =============================================================== -->
+    <!-- Distrubution management -->
+    <!-- =============================================================== -->
+    <distributionManagement>
+        <site>
+            <id>site</id>
+            <name>site-doc</name>
+            <url>file://${basedir}/../target/site-doc/${project.artifactId}/</url>
+        </site>
+    </distributionManagement>
+
+
+    <!-- =============================================================== -->
+    <!-- Properties -->
+    <!-- =============================================================== -->
+    <properties>
+    </properties>
+
+
+    <!-- =============================================================== -->
+    <!-- Dependencies -->
+    <!-- =============================================================== -->
+    <dependencies>
+        <!-- ===== Modules ===== -->
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>myerp-technical</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>myerp-model</artifactId>
+        </dependency>
+
+        <!-- spring-jdbc : commons-exceptions, datasource management -->
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-jdbc</artifactId>
+        </dependency>
+
+
+        <!-- ========== Test Dependencies ========== -->
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- ===== Database (pour les tests) ===== -->
+        <!-- Pool de connexion -->
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-dbcp2</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <!-- Drivers JDBC PostgreSQL -->
+        <dependency>
+            <groupId>org.postgresql</groupId>
+            <artifactId>postgresql</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+
+    <!-- =============================================================== -->
+    <!-- Profiles -->
+    <!-- =============================================================== -->
+    <profiles>
+        <!-- Profile utilisé pour lancer les tests d'intégration de la couche Consumer -->
+        <profile>
+            <id>test-consumer</id>
+            <build>
+                <plugins>
+                    <!-- Ajout du répertoire src/test-consumer/java en tant que source de test du module -->
+                    <plugin>
+                        <groupId>org.codehaus.mojo</groupId>
+                        <artifactId>build-helper-maven-plugin</artifactId>
+                        <executions>
+                            <execution>
+                                <id>add-test-source</id>
+                                <phase>generate-test-sources</phase>
+                                <goals>
+                                    <goal>add-test-source</goal>
+                                </goals>
+                                <configuration>
+                                    <sources>
+                                        <source>src/test-consumer/java</source>
+                                    </sources>
+                                </configuration>
+                            </execution>
+                        </executions>
+                    </plugin>
+                </plugins>
+                <testResources>
+                    <testResource>
+                        <directory>src/test/resources</directory>
+                    </testResource>
+                    <testResource>
+                        <directory>src/test-consumer/resources</directory>
+                    </testResource>
+                </testResources>
+            </build>
+        </profile>
+    </profiles>
+
+
+    <!-- =============================================================== -->
+    <!-- Build -->
+    <!-- =============================================================== -->
+    <build>
+    </build>
+</project>
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/ConsumerHelper.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/ConsumerHelper.java
new file mode 100644
index 0000000..52c749a
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/ConsumerHelper.java
@@ -0,0 +1,30 @@
+package com.dummy.myerp.consumer;
+
+import com.dummy.myerp.consumer.dao.contrat.DaoProxy;
+
+
+/**
+ * Classe d'aide pour les classes du module consumer
+ */
+public abstract class ConsumerHelper {
+
+    /** Le DaoProxy à utiliser pour accéder aux autres classes de DAO */
+    private static DaoProxy daoProxy;
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Méthode de configuration de la classe
+     *
+     * @param pDaoProxy     -
+     */
+    public static void configure(DaoProxy pDaoProxy) {
+        daoProxy = pDaoProxy;
+    }
+
+
+    // ==================== Getters/Setters ====================
+    public static DaoProxy getDaoProxy() {
+        return daoProxy;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/contrat/ComptabiliteDao.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/contrat/ComptabiliteDao.java
new file mode 100644
index 0000000..f5b75db
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/contrat/ComptabiliteDao.java
@@ -0,0 +1,124 @@
+package com.dummy.myerp.consumer.dao.contrat;
+
+import java.util.List;
+
+import com.dummy.myerp.model.bean.CompteComptable;
+import com.dummy.myerp.model.bean.EcritureComptable;
+import com.dummy.myerp.model.bean.JournalComptable;
+import com.dummy.myerp.model.bean.SequenceEcritureComptable;
+import com.dummy.myerp.technical.exception.NotFoundException;
+
+
+/**
+ * Interface de DAO des objets du package Comptabilite
+ */
+public interface ComptabiliteDao {
+    // ==================== LectureComptable ====================
+
+    /**
+     * Renvoie la liste des Comptes Comptables
+     * @return {@link List}
+     */
+    List<CompteComptable> getListCompteComptable();
+
+
+    /**
+     * Renvoie la liste des Journaux Comptables
+     * @return {@link List}
+     */
+    List<JournalComptable> getListJournalComptable();
+
+    // ==================== EcritureComptable ====================
+
+    /**
+     * Renvoie la liste des Écritures Comptables
+     * @return {@link List}
+     */
+    List<EcritureComptable> getListEcritureComptable();
+
+    /**
+     * Renvoie l'Écriture Comptable d'id {@code pId}.
+     *
+     * @param pId l'id de l'écriture comptable
+     * @return {@link EcritureComptable}
+     * @throws NotFoundException : Si l'écriture comptable n'est pas trouvée
+     */
+    EcritureComptable getEcritureComptable(Integer pId) throws NotFoundException;
+
+    /**
+     * Renvoie l'Écriture Comptable de référence {@code pRef}.
+     *
+     * @param pReference la référence de l'écriture comptable
+     * @return {@link EcritureComptable}
+     * @throws NotFoundException : Si l'écriture comptable n'est pas trouvée
+     */
+    EcritureComptable getEcritureComptableByRef(String pReference) throws NotFoundException;
+
+    /**
+     * Charge la liste des lignes d'écriture de l'écriture comptable {@code pEcritureComptable}
+     *
+     * @param pEcritureComptable -
+     */
+    void loadListLigneEcriture(EcritureComptable pEcritureComptable);
+
+    /**
+     * Insert une nouvelle écriture comptable.
+     *
+     * @param pEcritureComptable -
+     */
+    void insertEcritureComptable(EcritureComptable pEcritureComptable);
+
+    /**
+     * Met à jour l'écriture comptable.
+     *
+     * @param pEcritureComptable -
+     */
+    void updateEcritureComptable(EcritureComptable pEcritureComptable);
+
+    /**
+     * Supprime l'écriture comptable d'id {@code pId}.
+     *
+     * @param pId l'id de l'écriture
+     */
+    void deleteEcritureComptable(Integer pId);
+
+    // ==================== SequenceEcritureComptable ====================
+
+    /**
+     * Renvoie la liste des Séquences d'écriture comptable
+     * @return {@link List}
+     */
+    List<SequenceEcritureComptable> getListSequenceEcritureComptable();
+
+    /**
+     * Renvoi la Sequence d'écriture comptable correspondante au Journal comptable pour l'année donnée
+     *
+     * @param pJournalCode -
+     * @param pAnnee -
+     * @return {@link SequenceEcritureComptable}
+     * @throws NotFoundException Si la séquence n'est pas trouvée
+     */
+    SequenceEcritureComptable getSequenceEcritureComptable(String pJournalCode, int pAnnee) throws NotFoundException;
+
+    /**
+     * Insert une nouvelle séquence d'écriture comptable.
+     *
+     * @param sequence -
+     */
+    void insertSequenceEcritureComptable(SequenceEcritureComptable sequence);
+
+    /**
+     * Met à jour la séquence de l'écriture comptable.
+     *
+     * @param sequence -
+     */
+    void updateSequenceEcritureComptable(SequenceEcritureComptable sequence);
+
+    /**
+     * Supprime la séquence d'écriture comptable de code journal {@code pJournalCode} et d'année {@code pAnnee}.
+     *
+     * @param pJournalCode le code journal de la séquence d'écriture
+     * @param pAnnee l'année de la séquence d'écriture
+     */
+    public void deleteSequenceEcritureComptable(String pJournalCode, int pAnnee);
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/contrat/DaoProxy.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/contrat/DaoProxy.java
new file mode 100644
index 0000000..d2e70f3
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/contrat/DaoProxy.java
@@ -0,0 +1,16 @@
+package com.dummy.myerp.consumer.dao.contrat;
+
+
+/**
+ * Interface du Proxy d'accès à la couche DAO
+ */
+public interface DaoProxy {
+
+    /**
+     * Renvoie un {@link ComptabiliteDao}
+     *
+     * @return {@link ComptabiliteDao}
+     */
+    ComptabiliteDao getComptabiliteDao();
+
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/DaoProxyImpl.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/DaoProxyImpl.java
new file mode 100644
index 0000000..306d26a
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/DaoProxyImpl.java
@@ -0,0 +1,45 @@
+package com.dummy.myerp.consumer.dao.impl;
+
+import com.dummy.myerp.consumer.dao.contrat.ComptabiliteDao;
+import com.dummy.myerp.consumer.dao.contrat.DaoProxy;
+
+
+/**
+ * <p>Implémentation du Proxy d'accès à la couche DAO.</p>
+ */
+public final class DaoProxyImpl implements DaoProxy {
+
+    // ==================== Attributs ====================
+    /** {@link ComptabiliteDao} */
+    private ComptabiliteDao comptabiliteDao;
+
+
+    // ==================== Constructeurs ====================
+    /** Instance unique de la classe (design pattern Singleton) */
+    private static final DaoProxyImpl INSTANCE = new DaoProxyImpl();
+
+    /**
+     * Renvoie l'instance unique de la classe (design pattern Singleton).
+     *
+     * @return {@link DaoProxyImpl}
+     */
+    protected static DaoProxyImpl getInstance() {
+        return DaoProxyImpl.INSTANCE;
+    }
+
+    /**
+     * Constructeur.
+     */
+    private DaoProxyImpl() {
+        super();
+    }
+
+
+    // ==================== Getters/Setters ====================
+    public ComptabiliteDao getComptabiliteDao() {
+        return this.comptabiliteDao;
+    }
+    public void setComptabiliteDao(ComptabiliteDao pComptabiliteDao) {
+        this.comptabiliteDao = pComptabiliteDao;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/cache/CompteComptableDaoCache.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/cache/CompteComptableDaoCache.java
new file mode 100644
index 0000000..1886693
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/cache/CompteComptableDaoCache.java
@@ -0,0 +1,42 @@
+package com.dummy.myerp.consumer.dao.impl.cache;
+
+import java.util.List;
+
+import com.dummy.myerp.consumer.ConsumerHelper;
+import com.dummy.myerp.model.bean.CompteComptable;
+
+
+/**
+ * Cache DAO de {@link CompteComptable}
+ */
+public class CompteComptableDaoCache {
+
+    // ==================== Attributs ====================
+    /** The List compte comptable. */
+    private List<CompteComptable> listCompteComptable;
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Instantiates a new Compte comptable dao cache.
+     */
+    public CompteComptableDaoCache() {
+    }
+
+
+    // ==================== Méthodes ====================
+    /**
+     * Gets by numero.
+     *
+     * @param pNumero the numero
+     * @return {@link CompteComptable} ou {@code null}
+     */
+    public CompteComptable getByNumero(Integer pNumero) {
+        if (listCompteComptable == null) {
+            listCompteComptable = ConsumerHelper.getDaoProxy().getComptabiliteDao().getListCompteComptable();
+        }
+
+        CompteComptable vRetour = CompteComptable.getByNumero(listCompteComptable, pNumero);
+        return vRetour;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/cache/JournalComptableDaoCache.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/cache/JournalComptableDaoCache.java
new file mode 100644
index 0000000..26080fe
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/cache/JournalComptableDaoCache.java
@@ -0,0 +1,42 @@
+package com.dummy.myerp.consumer.dao.impl.cache;
+
+import java.util.List;
+
+import com.dummy.myerp.consumer.ConsumerHelper;
+import com.dummy.myerp.model.bean.JournalComptable;
+
+
+/**
+ * Cache DAO de {@link JournalComptable}
+ */
+public class JournalComptableDaoCache {
+
+    // ==================== Attributs ====================
+    /** The List compte comptable. */
+    private List<JournalComptable> listJournalComptable;
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Instantiates a new Compte comptable dao cache.
+     */
+    public JournalComptableDaoCache() {
+    }
+
+
+    // ==================== Méthodes ====================
+    /**
+     * Gets by code.
+     *
+     * @param pCode le code du {@link JournalComptable}
+     * @return {@link JournalComptable} ou {@code null}
+     */
+    public JournalComptable getByCode(String pCode) {
+        if (listJournalComptable == null) {
+            listJournalComptable = ConsumerHelper.getDaoProxy().getComptabiliteDao().getListJournalComptable();
+        }
+
+        JournalComptable vRetour = JournalComptable.getByCode(listJournalComptable, pCode);
+        return vRetour;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/dao/ComptabiliteDaoImpl.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/dao/ComptabiliteDaoImpl.java
new file mode 100644
index 0000000..352f8e7
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/dao/ComptabiliteDaoImpl.java
@@ -0,0 +1,364 @@
+package com.dummy.myerp.consumer.dao.impl.db.dao;
+
+import java.sql.Types;
+import java.util.List;
+
+import com.dummy.myerp.consumer.dao.impl.db.rowmapper.comptabilite.*;
+import com.dummy.myerp.model.bean.*;
+import org.springframework.dao.EmptyResultDataAccessException;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
+import com.dummy.myerp.consumer.dao.contrat.ComptabiliteDao;
+import com.dummy.myerp.consumer.db.AbstractDbConsumer;
+import com.dummy.myerp.consumer.db.DataSourcesEnum;
+import com.dummy.myerp.technical.exception.NotFoundException;
+
+
+/**
+ * Implémentation de l'interface {@link ComptabiliteDao}
+ */
+public class ComptabiliteDaoImpl extends AbstractDbConsumer implements ComptabiliteDao {
+
+    // ==================== Constructeurs ====================
+    /** Instance unique de la classe (design pattern Singleton) */
+    private static final ComptabiliteDaoImpl INSTANCE = new ComptabiliteDaoImpl();
+
+    /**
+     * Renvoie l'instance unique de la classe (design pattern Singleton).
+     *
+     * @return {@link ComptabiliteDaoImpl}
+     */
+    public static ComptabiliteDaoImpl getInstance() {
+        return ComptabiliteDaoImpl.INSTANCE;
+    }
+
+    /**
+     * Constructeur.
+     */
+    protected ComptabiliteDaoImpl() {
+        super();
+    }
+
+
+    // ==================== Méthodes ====================
+    /** SQLgetListCompteComptable */
+    private static String SQLgetListCompteComptable;
+    public void setSQLgetListCompteComptable(String pSQLgetListCompteComptable) {
+        SQLgetListCompteComptable = pSQLgetListCompteComptable;
+    }
+    @Override
+    public List<CompteComptable> getListCompteComptable() {
+        JdbcTemplate vJdbcTemplate = new JdbcTemplate(this.getDataSource(DataSourcesEnum.MYERP));
+        CompteComptableRM vRM = new CompteComptableRM();
+        List<CompteComptable> vList = vJdbcTemplate.query(SQLgetListCompteComptable, vRM);
+        return vList;
+    }
+
+
+    /** SQLgetListJournalComptable */
+    private static String SQLgetListJournalComptable;
+    public void setSQLgetListJournalComptable(String pSQLgetListJournalComptable) {
+        SQLgetListJournalComptable = pSQLgetListJournalComptable;
+    }
+    @Override
+    public List<JournalComptable> getListJournalComptable() {
+        JdbcTemplate vJdbcTemplate = new JdbcTemplate(this.getDataSource(DataSourcesEnum.MYERP));
+        JournalComptableRM vRM = new JournalComptableRM();
+        List<JournalComptable> vList = vJdbcTemplate.query(SQLgetListJournalComptable, vRM);
+        return vList;
+    }
+
+    // ==================== EcritureComptable - GET ====================
+
+    /** SQLgetListEcritureComptable */
+    private static String SQLgetListEcritureComptable;
+    public void setSQLgetListEcritureComptable(String pSQLgetListEcritureComptable) {
+        SQLgetListEcritureComptable = pSQLgetListEcritureComptable;
+    }
+    @Override
+    public List<EcritureComptable> getListEcritureComptable() {
+        JdbcTemplate vJdbcTemplate = new JdbcTemplate(this.getDataSource(DataSourcesEnum.MYERP));
+        EcritureComptableRM vRM = new EcritureComptableRM();
+        List<EcritureComptable> vList = vJdbcTemplate.query(SQLgetListEcritureComptable, vRM);
+        return vList;
+    }
+
+
+    /** SQLgetEcritureComptable */
+    private static String SQLgetEcritureComptable;
+    public void setSQLgetEcritureComptable(String pSQLgetEcritureComptable) {
+        SQLgetEcritureComptable = pSQLgetEcritureComptable;
+    }
+    @Override
+    public EcritureComptable getEcritureComptable(Integer pId) throws NotFoundException {
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("id", pId);
+        EcritureComptableRM vRM = new EcritureComptableRM();
+        EcritureComptable vBean;
+        try {
+            vBean = vJdbcTemplate.queryForObject(SQLgetEcritureComptable, vSqlParams, vRM);
+        } catch (EmptyResultDataAccessException vEx) {
+            throw new NotFoundException("EcritureComptable non trouvée : id=" + pId);
+        }
+        return vBean;
+    }
+
+
+    /** SQLgetEcritureComptableByRef */
+    private static String SQLgetEcritureComptableByRef;
+    public void setSQLgetEcritureComptableByRef(String pSQLgetEcritureComptableByRef) {
+        SQLgetEcritureComptableByRef = pSQLgetEcritureComptableByRef;
+    }
+    @Override
+    public EcritureComptable getEcritureComptableByRef(String pReference) throws NotFoundException {
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("reference", pReference);
+        EcritureComptableRM vRM = new EcritureComptableRM();
+        EcritureComptable vBean;
+        try {
+            vBean = vJdbcTemplate.queryForObject(SQLgetEcritureComptableByRef, vSqlParams, vRM);
+        } catch (EmptyResultDataAccessException vEx) {
+            throw new NotFoundException("EcritureComptable non trouvée : reference=" + pReference);
+        }
+        return vBean;
+    }
+
+
+    /** SQLloadListLigneEcriture */
+    private static String SQLloadListLigneEcriture;
+    public void setSQLloadListLigneEcriture(String pSQLloadListLigneEcriture) {
+        SQLloadListLigneEcriture = pSQLloadListLigneEcriture;
+    }
+    @Override
+    public void loadListLigneEcriture(EcritureComptable pEcritureComptable) {
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("ecriture_id", pEcritureComptable.getId());
+        LigneEcritureComptableRM vRM = new LigneEcritureComptableRM();
+        List<LigneEcritureComptable> vList = vJdbcTemplate.query(SQLloadListLigneEcriture, vSqlParams, vRM);
+        pEcritureComptable.getListLigneEcriture().clear();
+        pEcritureComptable.getListLigneEcriture().addAll(vList);
+    }
+
+
+    // ==================== EcritureComptable - INSERT ====================
+
+    /** SQLinsertEcritureComptable */
+    private static String SQLinsertEcritureComptable;
+    public void setSQLinsertEcritureComptable(String pSQLinsertEcritureComptable) {
+        SQLinsertEcritureComptable = pSQLinsertEcritureComptable;
+    }
+    @Override
+    public void insertEcritureComptable(EcritureComptable pEcritureComptable) {
+        // ===== Ecriture Comptable
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("journal_code", pEcritureComptable.getJournal().getCode());
+        vSqlParams.addValue("reference", pEcritureComptable.getReference());
+        vSqlParams.addValue("date", pEcritureComptable.getDate(), Types.DATE);
+        vSqlParams.addValue("libelle", pEcritureComptable.getLibelle());
+
+        vJdbcTemplate.update(SQLinsertEcritureComptable, vSqlParams);
+
+        // ----- Récupération de l'id
+        Integer vId = this.queryGetSequenceValuePostgreSQL(DataSourcesEnum.MYERP, "myerp.ecriture_comptable_id_seq",
+                                                           Integer.class);
+        pEcritureComptable.setId(vId);
+
+        // ===== Liste des lignes d'écriture
+        this.insertListLigneEcritureComptable(pEcritureComptable);
+    }
+
+    /** SQLinsertListLigneEcritureComptable */
+    private static String SQLinsertListLigneEcritureComptable;
+    public void setSQLinsertListLigneEcritureComptable(String pSQLinsertListLigneEcritureComptable) {
+        SQLinsertListLigneEcritureComptable = pSQLinsertListLigneEcritureComptable;
+    }
+    /**
+     * Insert les lignes d'écriture de l'écriture comptable
+     * @param pEcritureComptable l'écriture comptable
+     */
+    protected void insertListLigneEcritureComptable(EcritureComptable pEcritureComptable) {
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("ecriture_id", pEcritureComptable.getId());
+
+        int vLigneId = 0;
+        for (LigneEcritureComptable vLigne : pEcritureComptable.getListLigneEcriture()) {
+            vLigneId++;
+            vSqlParams.addValue("ligne_id", vLigneId);
+            vSqlParams.addValue("compte_comptable_numero", vLigne.getCompteComptable().getNumero());
+            vSqlParams.addValue("libelle", vLigne.getLibelle());
+            vSqlParams.addValue("debit", vLigne.getDebit());
+
+            vSqlParams.addValue("credit", vLigne.getCredit());
+
+            vJdbcTemplate.update(SQLinsertListLigneEcritureComptable, vSqlParams);
+        }
+    }
+
+
+    // ==================== EcritureComptable - UPDATE ====================
+
+    /** SQLupdateEcritureComptable */
+    private static String SQLupdateEcritureComptable;
+    public void setSQLupdateEcritureComptable(String pSQLupdateEcritureComptable) {
+        SQLupdateEcritureComptable = pSQLupdateEcritureComptable;
+    }
+    @Override
+    public void updateEcritureComptable(EcritureComptable pEcritureComptable) {
+        // ===== Ecriture Comptable
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("id", pEcritureComptable.getId());
+        vSqlParams.addValue("journal_code", pEcritureComptable.getJournal().getCode());
+        vSqlParams.addValue("reference", pEcritureComptable.getReference());
+        vSqlParams.addValue("date", pEcritureComptable.getDate(), Types.DATE);
+        vSqlParams.addValue("libelle", pEcritureComptable.getLibelle());
+
+        vJdbcTemplate.update(SQLupdateEcritureComptable, vSqlParams);
+
+        // ===== Liste des lignes d'écriture
+        this.deleteListLigneEcritureComptable(pEcritureComptable.getId());
+        this.insertListLigneEcritureComptable(pEcritureComptable);
+    }
+
+
+    // ==================== EcritureComptable - DELETE ====================
+
+    /** SQLdeleteEcritureComptable */
+    private static String SQLdeleteEcritureComptable;
+    public void setSQLdeleteEcritureComptable(String pSQLdeleteEcritureComptable) {
+        SQLdeleteEcritureComptable = pSQLdeleteEcritureComptable;
+    }
+    @Override
+    public void deleteEcritureComptable(Integer pId) {
+        // ===== Suppression des lignes d'écriture
+        this.deleteListLigneEcritureComptable(pId);
+
+        // ===== Suppression de l'écriture
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("id", pId);
+        vJdbcTemplate.update(SQLdeleteEcritureComptable, vSqlParams);
+    }
+
+    /** SQLdeleteListLigneEcritureComptable */
+    private static String SQLdeleteListLigneEcritureComptable;
+    public void setSQLdeleteListLigneEcritureComptable(String pSQLdeleteListLigneEcritureComptable) {
+        SQLdeleteListLigneEcritureComptable = pSQLdeleteListLigneEcritureComptable;
+    }
+    /**
+     * Supprime les lignes d'écriture de l'écriture comptable d'id {@code pEcritureId}
+     * @param pEcritureId id de l'écriture comptable
+     */
+    protected void deleteListLigneEcritureComptable(Integer pEcritureId) {
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("ecriture_id", pEcritureId);
+        vJdbcTemplate.update(SQLdeleteListLigneEcritureComptable, vSqlParams);
+    }
+
+    // ==================== SequenceEcritureComptable - GET ====================
+
+    /** SQLgetListSequenceEcritureComptable */
+    private static String SQLgetListSequenceEcritureComptable;
+    public void setSQLgetListSequenceEcritureComptable(String pSQLgetListSequenceEcritureComptable) {
+        SQLgetListSequenceEcritureComptable = pSQLgetListSequenceEcritureComptable;
+    }
+
+    /**
+     *
+     * @return la liste des sequences d'écriture
+     */
+    @Override
+    public List<SequenceEcritureComptable> getListSequenceEcritureComptable() {
+        JdbcTemplate vJdbcTemplate = new JdbcTemplate(this.getDataSource(DataSourcesEnum.MYERP));
+        SequenceEcritureComptableRM vRM = new SequenceEcritureComptableRM();
+        List<SequenceEcritureComptable> sequenceEcritureComptableList = vJdbcTemplate.query(SQLgetListSequenceEcritureComptable, vRM);
+        return sequenceEcritureComptableList;
+    }
+
+    /** SQLgetSequenceEcritureComptable */
+    private static String SQLgetSequenceEcritureComptable;
+    public void setSQLgetSequenceEcritureComptable(String pSQLgetSequenceEcritureComptable) {
+        SQLgetSequenceEcritureComptable = pSQLgetSequenceEcritureComptable;
+    }
+    @Override
+    public SequenceEcritureComptable getSequenceEcritureComptable(String pJournalCode, int pCurrentYear) throws NotFoundException {
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("journal_code", pJournalCode);
+        vSqlParams.addValue("annee", pCurrentYear);
+        SequenceEcritureComptableRM vRM = new SequenceEcritureComptableRM();
+        SequenceEcritureComptable vBean;
+        try {
+            vBean = vJdbcTemplate.queryForObject(SQLgetSequenceEcritureComptable, vSqlParams, vRM);
+        } catch (EmptyResultDataAccessException vEx) {
+            throw new NotFoundException("SequenceEcritureComptable non trouvée : codeJournal=" + pJournalCode + " - currentYear=" + pCurrentYear);
+        }
+        return vBean;
+    }
+
+    // ==================== SequenceEcritureComptable - INSERT ====================
+
+    /** SQLinsertSequenceEcritureComptable */
+    private static String SQLinsertSequenceEcritureComptable;
+    public void setSQLinsertSequenceEcritureComptable(String pSQLinsertSequenceEcritureComptable) {
+        SQLinsertSequenceEcritureComptable = pSQLinsertSequenceEcritureComptable;
+    }
+
+    /**
+     * Insert une nouvelle sequence d'écriture
+     * @param sequence -
+     */
+    @Override
+    public void insertSequenceEcritureComptable(SequenceEcritureComptable sequence) {
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("journal_code", sequence.getJournalCode());
+        vSqlParams.addValue("annee", sequence.getAnnee());
+        vSqlParams.addValue("derniere_valeur", sequence.getDerniereValeur());
+
+        vJdbcTemplate.update(SQLinsertSequenceEcritureComptable, vSqlParams);
+    }
+
+    // ==================== SequenceEcritureComptable - UPDATE ====================
+
+    /** SQLupdateSequenceEcritureComptable */
+    private static String SQLupdateSequenceEcritureComptable;
+    public void setSQLupdateSequenceEcritureComptable(String pSQLSQLupdateSequenceEcritureComptable) {
+        SQLupdateSequenceEcritureComptable = pSQLSQLupdateSequenceEcritureComptable;
+    }
+
+    @Override
+    public void updateSequenceEcritureComptable(SequenceEcritureComptable sequence) {
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("journal_code", sequence.getJournalCode());
+        vSqlParams.addValue("annee", sequence.getAnnee());
+        vSqlParams.addValue("derniere_valeur", sequence.getDerniereValeur());
+
+        vJdbcTemplate.update(SQLupdateSequenceEcritureComptable, vSqlParams);
+    }
+
+    // ==================== SequenceEcritureComptable - DELETE ====================
+
+    /** SQLdeleteEcritureComptable */
+    private static String SQLdeleteSequenceEcritureComptable;
+    public void setSQLdeleteSequenceEcritureComptable(String pSQLdeleteSequenceEcritureComptable) {
+        SQLdeleteSequenceEcritureComptable = pSQLdeleteSequenceEcritureComptable;
+    }
+    @Override
+    public void deleteSequenceEcritureComptable(String pJournalCode, int pAnnee) {
+        // ===== Suppression de la sequence d'écriture comptable
+        NamedParameterJdbcTemplate vJdbcTemplate = new NamedParameterJdbcTemplate(getDataSource(DataSourcesEnum.MYERP));
+        MapSqlParameterSource vSqlParams = new MapSqlParameterSource();
+        vSqlParams.addValue("journal_code", pJournalCode);
+        vSqlParams.addValue("annee", pAnnee);
+        vJdbcTemplate.update(SQLdeleteSequenceEcritureComptable, vSqlParams);
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/CompteComptableRM.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/CompteComptableRM.java
new file mode 100644
index 0000000..5adb08d
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/CompteComptableRM.java
@@ -0,0 +1,23 @@
+package com.dummy.myerp.consumer.dao.impl.db.rowmapper.comptabilite;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import org.springframework.jdbc.core.RowMapper;
+import com.dummy.myerp.model.bean.CompteComptable;
+
+
+/**
+ * {@link RowMapper} de {@link CompteComptable}
+ */
+public class CompteComptableRM implements RowMapper<CompteComptable> {
+
+    @Override
+    public CompteComptable mapRow(ResultSet pRS, int pRowNum) throws SQLException {
+        CompteComptable vBean = new CompteComptable();
+        vBean.setNumero(pRS.getInt("numero"));
+        vBean.setLibelle(pRS.getString("libelle"));
+
+        return vBean;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/EcritureComptableRM.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/EcritureComptableRM.java
new file mode 100644
index 0000000..0198db6
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/EcritureComptableRM.java
@@ -0,0 +1,35 @@
+package com.dummy.myerp.consumer.dao.impl.db.rowmapper.comptabilite;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import org.springframework.jdbc.core.RowMapper;
+import com.dummy.myerp.consumer.ConsumerHelper;
+import com.dummy.myerp.consumer.dao.impl.cache.JournalComptableDaoCache;
+import com.dummy.myerp.model.bean.EcritureComptable;
+
+
+/**
+ * {@link RowMapper} de {@link EcritureComptable}
+ */
+public class EcritureComptableRM implements RowMapper<EcritureComptable> {
+
+    /** JournalComptableDaoCache */
+    private final JournalComptableDaoCache journalComptableDaoCache = new JournalComptableDaoCache();
+
+
+    @Override
+    public EcritureComptable mapRow(ResultSet pRS, int pRowNum) throws SQLException {
+        EcritureComptable vBean = new EcritureComptable();
+        vBean.setId(pRS.getInt("id"));
+        vBean.setJournal(journalComptableDaoCache.getByCode(pRS.getString("journal_code")));
+        vBean.setReference(pRS.getString("reference"));
+        vBean.setDate(pRS.getDate("date"));
+        vBean.setLibelle(pRS.getString("libelle"));
+
+        // Chargement des lignes d'écriture
+        ConsumerHelper.getDaoProxy().getComptabiliteDao().loadListLigneEcriture(vBean);
+
+        return vBean;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/JournalComptableRM.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/JournalComptableRM.java
new file mode 100644
index 0000000..26ad980
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/JournalComptableRM.java
@@ -0,0 +1,23 @@
+package com.dummy.myerp.consumer.dao.impl.db.rowmapper.comptabilite;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import org.springframework.jdbc.core.RowMapper;
+import com.dummy.myerp.model.bean.JournalComptable;
+
+
+/**
+ * {@link RowMapper} de {@link JournalComptable}
+ */
+public class JournalComptableRM implements RowMapper<JournalComptable> {
+
+    @Override
+    public JournalComptable mapRow(ResultSet pRS, int pRowNum) throws SQLException {
+        JournalComptable vBean = new JournalComptable();
+        vBean.setCode(pRS.getString("code"));
+        vBean.setLibelle(pRS.getString("libelle"));
+
+        return vBean;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/LigneEcritureComptableRM.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/LigneEcritureComptableRM.java
new file mode 100644
index 0000000..50e33a8
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/LigneEcritureComptableRM.java
@@ -0,0 +1,31 @@
+package com.dummy.myerp.consumer.dao.impl.db.rowmapper.comptabilite;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import org.springframework.jdbc.core.RowMapper;
+import com.dummy.myerp.consumer.dao.impl.cache.CompteComptableDaoCache;
+import com.dummy.myerp.model.bean.LigneEcritureComptable;
+
+
+/**
+ * {@link RowMapper} de {@link LigneEcritureComptable}
+ */
+public class LigneEcritureComptableRM implements RowMapper<LigneEcritureComptable> {
+
+    /** CompteComptableDaoCache */
+    private final CompteComptableDaoCache compteComptableDaoCache = new CompteComptableDaoCache();
+
+
+    @Override
+    public LigneEcritureComptable mapRow(ResultSet pRS, int pRowNum) throws SQLException {
+        LigneEcritureComptable vBean = new LigneEcritureComptable();
+        vBean.setCompteComptable(compteComptableDaoCache.getByNumero(pRS.getObject("compte_comptable_numero",
+                                                                                   Integer.class)));
+        vBean.setCredit(pRS.getBigDecimal("credit"));
+        vBean.setDebit(pRS.getBigDecimal("debit"));
+        vBean.setLibelle(pRS.getString("libelle"));
+
+        return vBean;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/SequenceEcritureComptableRM.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/SequenceEcritureComptableRM.java
new file mode 100644
index 0000000..f871e23
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/dao/impl/db/rowmapper/comptabilite/SequenceEcritureComptableRM.java
@@ -0,0 +1,28 @@
+package com.dummy.myerp.consumer.dao.impl.db.rowmapper.comptabilite;
+
+import com.dummy.myerp.consumer.dao.impl.cache.JournalComptableDaoCache;
+import com.dummy.myerp.model.bean.SequenceEcritureComptable;
+import com.dummy.myerp.model.bean.JournalComptable;
+import org.springframework.jdbc.core.RowMapper;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+public class SequenceEcritureComptableRM implements RowMapper<SequenceEcritureComptable> {
+
+    /** JournalComptableDaoCache */
+    private final JournalComptableDaoCache journalComptableDaoCache = new JournalComptableDaoCache();
+
+    @Override
+    public SequenceEcritureComptable mapRow(ResultSet rs, int pRowNum) throws SQLException {
+        SequenceEcritureComptable sequence = new SequenceEcritureComptable();
+
+        JournalComptable journalComptable = journalComptableDaoCache.getByCode(rs.getString("journal_code"));
+
+        sequence.setJournalCode(journalComptable.getCode());
+        sequence.setAnnee(rs.getInt("annee"));
+        sequence.setDerniereValeur(rs.getInt("derniere_valeur"));
+
+        return sequence;
+    }
+}
\ No newline at end of file
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/AbstractDbConsumer.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/AbstractDbConsumer.java
new file mode 100644
index 0000000..b2e0847
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/AbstractDbConsumer.java
@@ -0,0 +1,112 @@
+package com.dummy.myerp.consumer.db;
+
+import java.util.HashMap;
+import java.util.Map;
+import javax.sql.DataSource;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.springframework.jdbc.core.JdbcTemplate;
+import com.dummy.myerp.consumer.ConsumerHelper;
+import com.dummy.myerp.consumer.dao.contrat.DaoProxy;
+
+
+/**
+ * <p>Classe mère des classes de Consumer DB</p>
+ */
+public abstract class AbstractDbConsumer {
+
+// ==================== Attributs Static ====================
+    /** Logger Log4j pour la classe */
+    private static final Logger LOGGER = LogManager.getLogger(AbstractDbConsumer.class);
+
+
+    /** Map des DataSources */
+    private static Map<DataSourcesEnum, DataSource> mapDataSource;
+
+
+    // ==================== Constructeurs ====================
+
+    /**
+     * Constructeur.
+     */
+    protected AbstractDbConsumer() {
+        super();
+    }
+
+
+    // ==================== Getters/Setters ====================
+    /**
+     * Renvoie une {@link DaoProxy}
+     *
+     * @return {@link DaoProxy}
+     */
+    protected static DaoProxy getDaoProxy() {
+        return ConsumerHelper.getDaoProxy();
+    }
+
+
+    // ==================== Méthodes ====================
+    /**
+     * Renvoie le {@link DataSource} associé demandée
+     *
+     * @param pDataSourceId -
+     * @return SimpleJdbcTemplate
+     */
+    protected DataSource getDataSource(DataSourcesEnum pDataSourceId) {
+        DataSource vRetour = this.mapDataSource.get(pDataSourceId);
+        if (vRetour == null) {
+            throw new UnsatisfiedLinkError("La DataSource suivante n'a pas été initialisée : " + pDataSourceId);
+        }
+        return vRetour;
+    }
+
+
+    /**
+     * Renvoie le dernière valeur utilisé d'une séquence
+     *
+     * <p><i><b>Attention : </b>Méthode spécifique au SGBD PostgreSQL</i></p>
+     *
+     * @param <T> : La classe de la valeur de la séquence.
+     * @param pDataSourcesId : L'identifiant de la {@link DataSource} à utiliser
+     * @param pSeqName : Le nom de la séquence dont on veut récupérer la valeur
+     * @param pSeqValueClass : Classe de la valeur de la séquence
+     * @return la dernière valeur de la séquence
+     */
+    protected <T> T queryGetSequenceValuePostgreSQL(DataSourcesEnum pDataSourcesId,
+                                                    String pSeqName, Class<T> pSeqValueClass) {
+
+        JdbcTemplate vJdbcTemplate = new JdbcTemplate(getDataSource(pDataSourcesId));
+        String vSeqSQL = "SELECT last_value FROM " + pSeqName;
+        T vSeqValue = vJdbcTemplate.queryForObject(vSeqSQL, pSeqValueClass);
+
+        return vSeqValue;
+    }
+
+
+    // ==================== Méthodes Static ====================
+    /**
+     * Méthode de configuration de la classe
+     *
+     * @param pMapDataSource -
+     */
+    public static void configure(Map<DataSourcesEnum, DataSource> pMapDataSource) {
+        // On pilote l'ajout avec l'Enum et on ne rajoute pas tout à l'aveuglette...
+        //   ( pas de AbstractDbDao.mapDataSource.putAll(...) )
+        Map<DataSourcesEnum, DataSource> vMapDataSource = new HashMap<>(DataSourcesEnum.values().length);
+        DataSourcesEnum[] vDataSourceIds = DataSourcesEnum.values();
+        for (DataSourcesEnum vDataSourceId : vDataSourceIds) {
+            DataSource vDataSource = pMapDataSource.get(vDataSourceId);
+            // On test si la DataSource est configurée
+            // (NB : elle est considérée comme configurée si elle est dans pMapDataSource mais à null)
+            if (vDataSource == null) {
+                if (!pMapDataSource.containsKey(vDataSourceId)) {
+                    LOGGER.error("La DataSource " + vDataSourceId + " n'a pas été initialisée !");
+                }
+            } else {
+                vMapDataSource.put(vDataSourceId, vDataSource);
+            }
+        }
+        mapDataSource = vMapDataSource;
+    }
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/DataSourcesEnum.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/DataSourcesEnum.java
new file mode 100644
index 0000000..bba447b
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/DataSourcesEnum.java
@@ -0,0 +1,11 @@
+package com.dummy.myerp.consumer.db;
+
+/**
+ * Enumération des Datasources utilisées par l'application
+ */
+public enum DataSourcesEnum {
+
+    /** MYERP */
+    MYERP,
+
+}
diff --git a/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/helper/ResultSetHelper.java b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/helper/ResultSetHelper.java
new file mode 100644
index 0000000..65b1bdc
--- /dev/null
+++ b/myerp-consumer/src/main/java/com/dummy/myerp/consumer/db/helper/ResultSetHelper.java
@@ -0,0 +1,79 @@
+package com.dummy.myerp.consumer.db.helper;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Calendar;
+import java.util.Date;
+
+import org.apache.commons.lang3.time.DateUtils;
+
+
+/**
+ * Classe utilitaire travaillant sur les ResultSet
+ */
+public abstract class ResultSetHelper {
+
+    // ==================== Constructeurs ====================
+    /**
+     * Constructeur.
+     */
+    protected ResultSetHelper() {
+        super();
+    }
+
+
+    // ==================== Méthodes ====================
+    /**
+     * Renvoie la valeur de la colonne pColName dans un <code>Integer</code>.
+     * Si la colonne vaut <code>null</code>, la méthode renvoie <code>null</code>
+     *
+     * @param pRS : Le ResultSet à intéroger
+     * @param pColName : Le nom de la colonne dans le retour de la requête SQL
+     * @return <code>Integer</code> ou <code>null</code>
+     * @throws SQLException sur erreur SQL
+     */
+    public static Integer getInteger(ResultSet pRS, String pColName) throws SQLException {
+        Integer vRetour = null;
+        int vInt = pRS.getInt(pColName);
+        if (!pRS.wasNull()) {
+            vRetour = new Integer(vInt);
+        }
+        return vRetour;
+    }
+
+    /**
+     * Renvoie la valeur de la colonne pColName dans un <code>Long</code>.
+     * Si la colonne vaut <code>null</code>, la méthode renvoie <code>null</code>
+     *
+     * @param pRS : Le ResultSet à intéroger
+     * @param pColName : Le nom de la colonne dans le retour de la requête SQL
+     * @return <code>Long</code> ou <code>null</code>
+     * @throws SQLException sur erreur SQL
+     */
+    public static Long getLong(ResultSet pRS, String pColName) throws SQLException {
+        Long vRetour = null;
+        Long vLong = pRS.getLong(pColName);
+        if (!pRS.wasNull()) {
+            vRetour = new Long(vLong);
+        }
+        return vRetour;
+    }
+
+
+    /**
+     * Renvoie la valeur de la colonne pColName dans un {@link Date} en faisant un truncate de l'heure.
+     * Si la colonne vaut <code>null</code>, la méthode renvoie <code>null</code>.
+     *
+     * @param pRS : Le ResultSet à intéroger
+     * @param pColName : Le nom de la colonne dans le retour de la requête SQL
+     * @return {@link Date} ou <code>null</code>
+     * @throws SQLException sur erreur SQL
+     */
+    public static Date getDate(ResultSet pRS, String pColName) throws SQLException {
+        Date vDate = pRS.getDate(pColName);
+        if (vDate != null) {
+            vDate = DateUtils.truncate(vDate, Calendar.DATE);
+        }
+        return vDate;
+    }
+}
diff --git a/myerp-consumer/src/main/resources/com/dummy/myerp/consumer/applicationContext.xml b/myerp-consumer/src/main/resources/com/dummy/myerp/consumer/applicationContext.xml
new file mode 100644
index 0000000..af9f234
--- /dev/null
+++ b/myerp-consumer/src/main/resources/com/dummy/myerp/consumer/applicationContext.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
+
+
+    <!-- ====================   Consumer   ==================== -->
+    <!-- AbstractDbConsumer -->
+    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
+        <property name="targetClass" value="com.dummy.myerp.consumer.db.AbstractDbConsumer"/>
+        <property name="targetMethod" value="configure"/>
+        <property name="arguments">
+            <map>
+                <entry value-ref="dataSourceMYERP">
+                    <key>
+                        <value type="com.dummy.myerp.consumer.db.DataSourcesEnum">MYERP</value>
+                    </key>
+                </entry>
+            </map>
+        </property>
+    </bean>
+
+
+    <!-- ==================== Consumer-Proxy ==================== -->
+
+    <!-- ConsumerHelper -->
+    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
+        <property name="targetClass" value="com.dummy.myerp.consumer.ConsumerHelper"/>
+        <property name="targetMethod" value="configure"/>
+        <property name="arguments">
+            <list>
+                <ref bean="DaoProxy"/>
+            </list>
+        </property>
+    </bean>
+
+
+    <!-- DaoProxy -->
+    <bean id="DaoProxy" class="com.dummy.myerp.consumer.dao.impl.DaoProxyImpl" factory-method="getInstance">
+        <property name="comptabiliteDao" ref="ComptabiliteDaoImpl"/>
+    </bean>
+
+
+    <!-- ==================== Databases ==================== -->
+    <bean id="dataSourceMYERP" class="com.dummy.myerp.technical.util.spring.NullFactoryBean">
+        <constructor-arg value="javax.sql.DataSource"/>
+    </bean>
+
+
+    <!-- ========== SQL ========== -->
+    <import resource="sqlContext.xml"/>
+</beans>
diff --git a/myerp-consumer/src/main/resources/com/dummy/myerp/consumer/sqlContext.xml b/myerp-consumer/src/main/resources/com/dummy/myerp/consumer/sqlContext.xml
new file mode 100644
index 0000000..90f9d8f
--- /dev/null
+++ b/myerp-consumer/src/main/resources/com/dummy/myerp/consumer/sqlContext.xml
@@ -0,0 +1,131 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
+
+
+    <!-- ==================== Injection des requêtes SQL ==================== -->
+
+
+    <!-- ========== ComptabiliteDaoImpl ========== -->
+    <bean id="ComptabiliteDaoImpl" class="com.dummy.myerp.consumer.dao.impl.db.dao.ComptabiliteDaoImpl"
+          factory-method="getInstance">
+        <property name="SQLgetListCompteComptable">
+            <value>
+                SELECT * FROM myerp.compte_comptable
+            </value>
+        </property>
+        <property name="SQLgetListJournalComptable">
+            <value>
+                SELECT * FROM myerp.journal_comptable
+            </value>
+        </property>
+        <property name="SQLgetListEcritureComptable">
+            <value>
+                SELECT * FROM myerp.ecriture_comptable
+            </value>
+        </property>
+        <property name="SQLgetEcritureComptable">
+            <value>
+                SELECT * FROM myerp.ecriture_comptable
+                WHERE id = :id
+            </value>
+        </property>
+        <property name="SQLgetEcritureComptableByRef">
+            <value>
+                SELECT * FROM myerp.ecriture_comptable
+                WHERE reference = :reference
+            </value>
+        </property>
+        <property name="SQLloadListLigneEcriture">
+            <value>
+                SELECT * FROM myerp.ligne_ecriture_comptable
+                WHERE ecriture_id = :ecriture_id
+                ORDER BY ligne_id
+            </value>
+        </property>
+        <property name="SQLinsertEcritureComptable">
+            <value>
+                INSERT INTO myerp.ecriture_comptable (
+                    id,
+                    journal_code, reference, date, libelle
+                ) VALUES (
+                    nextval('myerp.ecriture_comptable_id_seq'),
+                    :journal_code, :reference, :date, :libelle
+                )
+            </value>
+        </property>
+        <property name="SQLinsertListLigneEcritureComptable">
+            <value>
+                INSERT INTO myerp.ligne_ecriture_comptable (
+                    ecriture_id, ligne_id, compte_comptable_numero, libelle, debit,
+                    credit
+                ) VALUES (
+                    :ecriture_id, :ligne_id, :compte_comptable_numero, :libelle, :debit,
+                    :credit
+                )
+            </value>
+        </property>
+        <property name="SQLupdateEcritureComptable">
+            <value>
+                UPDATE myerp.ecriture_comptable SET
+                    journal_code = :journal_code,
+                    reference = :reference,
+                    date = :date,
+                    libelle = :libelle
+                WHERE
+                    id = :id
+            </value>
+        </property>
+        <property name="SQLdeleteEcritureComptable">
+            <value>
+                DELETE FROM myerp.ecriture_comptable
+                WHERE id = :id
+            </value>
+        </property>
+        <property name="SQLdeleteListLigneEcritureComptable">
+            <value>
+                DELETE FROM myerp.ligne_ecriture_comptable
+                WHERE ecriture_id = :ecriture_id
+            </value>
+        </property>
+
+        <!-- ========== SQL SequencEcritureComptable ========== -->
+        <property name="SQLgetListSequenceEcritureComptable">
+            <value>
+                SELECT * FROM myerp.sequence_ecriture_comptable
+            </value>
+        </property>
+        <property name="SQLgetSequenceEcritureComptable">
+            <value>
+                SELECT *
+                FROM myerp.sequence_ecriture_comptable
+                WHERE journal_code = :journal_code
+                AND annee = :annee
+            </value>
+        </property>
+        <property name="SQLinsertSequenceEcritureComptable">
+            <value>
+                INSERT INTO myerp.sequence_ecriture_comptable (
+                    journal_code, annee, derniere_valeur
+                ) VALUES (
+                    :journal_code, :annee, :derniere_valeur
+                )
+            </value>
+        </property>
+        <property name="SQLupdateSequenceEcritureComptable">
+            <value>
+                UPDATE myerp.sequence_ecriture_comptable
+                SET derniere_valeur = :derniere_valeur
+                WHERE journal_code = :journal_code AND annee = :annee
+            </value>
+        </property>
+        <property name="SQLdeleteSequenceEcritureComptable">
+            <value>
+                DELETE FROM myerp.sequence_ecriture_comptable
+                WHERE journal_code = :journal_code AND annee = :annee
+            </value>
+        </property>
+    </bean>
+
+</beans>
diff --git a/myerp-consumer/src/test/java/com/dummy/myerp/consumer/test/DaoTest.java b/myerp-consumer/src/test/java/com/dummy/myerp/consumer/test/DaoTest.java
new file mode 100644
index 0000000..1d02d3c
--- /dev/null
+++ b/myerp-consumer/src/test/java/com/dummy/myerp/consumer/test/DaoTest.java
@@ -0,0 +1,330 @@
+package com.dummy.myerp.consumer.test;
+
+import com.dummy.myerp.consumer.dao.contrat.DaoProxy;
+import com.dummy.myerp.model.bean.*;
+
+import com.dummy.myerp.technical.exception.NotFoundException;
+import org.junit.Assert;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.support.ClassPathXmlApplicationContext;
+
+import java.math.BigDecimal;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.List;
+
+public class DaoTest
+{
+	private static final String APPLICATION_CONTEXT_XML = "classpath:/com/dummy/myerp/consumer/test/applicationContext.xml";
+
+	private static DaoProxy daoProxy;
+
+	private static SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
+
+	private static SimpleDateFormat simpleYearFormat = new SimpleDateFormat("yyyy");
+
+	@BeforeClass
+	public static void iniTests()
+	{
+		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(APPLICATION_CONTEXT_XML);
+
+		daoProxy = (DaoProxy) applicationContext.getBean("DaoProxy");
+	}
+
+	/*
+	TESTS DES OPÉRATIONS GET ALL POUR CHAQUE ENTITÉ
+	 */
+
+	@Test
+	public void compteComptableNotEmpyTest()
+	{
+		List<CompteComptable> list = daoProxy.getComptabiliteDao().getListCompteComptable();
+
+		Assert.assertFalse(list.isEmpty());
+	}
+
+	@Test
+	public void ecritureComptableNotEmptyTest()
+	{
+		List<EcritureComptable> list = daoProxy.getComptabiliteDao().getListEcritureComptable();
+
+		Assert.assertFalse(list.isEmpty());
+	}
+
+	@Test
+	public void journalComptableNotEmptyTest()
+	{
+		List<JournalComptable> list = daoProxy.getComptabiliteDao().getListJournalComptable();
+
+		Assert.assertFalse(list.isEmpty());
+	}
+
+	@Test
+	public void sequenceEcritureComptableNotEmptyTest()
+	{
+		List<SequenceEcritureComptable> list = daoProxy.getComptabiliteDao().getListSequenceEcritureComptable();
+
+		Assert.assertFalse(list.isEmpty());
+	}
+
+	/*
+	TESTS D'OPÉRATIONS DE LECTURE DES ENTITÉS
+	 */
+
+	@Test
+	public void compteComptableReadableTest()
+	{
+		List<CompteComptable> list = daoProxy.getComptabiliteDao().getListCompteComptable();
+
+		CompteComptable compteComptable = CompteComptable.getByNumero(list, 512);
+
+		Assert.assertEquals("Banque", compteComptable.getLibelle());
+		Assert.assertTrue(512 == compteComptable.getNumero());
+	}
+
+	@Test
+	public void ecritureComtableReadableTest() throws NotFoundException
+	{
+		EcritureComptable ecritureComptable = daoProxy.getComptabiliteDao().getEcritureComptableByRef("BQ-2016/00003");
+
+		Assert.assertEquals("BQ", ecritureComptable.getJournal().getCode());
+		Assert.assertEquals("BQ-2016/00003", ecritureComptable.getReference());
+		Assert.assertEquals("2016-12-29", simpleDateFormat.format(ecritureComptable.getDate()));
+		Assert.assertEquals("Paiement Facture F110001", ecritureComptable.getLibelle());
+	}
+
+	@Test
+	public void journalComptableReadingTest()
+	{
+		List<JournalComptable> list = daoProxy.getComptabiliteDao().getListJournalComptable();
+
+		JournalComptable journalComptable = JournalComptable.getByCode(list, "VE");
+
+		Assert.assertEquals("VE", journalComptable.getCode());
+		Assert.assertEquals("Vente", journalComptable.getLibelle());
+	}
+
+	@Test
+	public void sequenceEcritureComptableTest() throws NotFoundException
+	{
+		SequenceEcritureComptable sequenceEcritureComptable = daoProxy.getComptabiliteDao().getSequenceEcritureComptable("VE", 2016);
+
+		Assert.assertEquals("VE", sequenceEcritureComptable.getJournalCode());
+		Assert.assertTrue(sequenceEcritureComptable.getAnnee() == 2016);
+		Assert.assertTrue(sequenceEcritureComptable.getDerniereValeur() == 41);
+	}
+
+	/*
+	TESTS ENTITÉS LIÉES : LIGNE ÉCRITURE COMPTABLE + LIGNE ÉCRITURE COMPTABLE
+	 */
+
+	@Test
+	public void ligneEcritureComptableToEcritureComptableTest() throws NotFoundException
+	{
+		List<LigneEcritureComptable> list = daoProxy.getComptabiliteDao().getEcritureComptableByRef("AC-2016/00001").getListLigneEcriture();
+
+		LigneEcritureComptable ligneEcritureComptable1 = list.get(0);
+		Assert.assertTrue(ligneEcritureComptable1.getCompteComptable().getNumero() == 606);
+
+		LigneEcritureComptable ligneEcritureComptable2 = list.get(1);
+		Assert.assertTrue(ligneEcritureComptable2.getCompteComptable().getNumero() == 4456);
+
+		LigneEcritureComptable ligneEcritureComptable3 = list.get(2);
+		Assert.assertFalse(ligneEcritureComptable3.getCompteComptable().getNumero() == 403);
+	}
+
+	@Test
+	public void ecritureComptableToJournalComptableTest() throws NotFoundException
+	{
+		JournalComptable journal1 = daoProxy.getComptabiliteDao().getEcritureComptableByRef("AC-2016/00001").getJournal();
+
+		Assert.assertEquals("AC", journal1.getCode());
+		Assert.assertEquals("Achat", journal1.getLibelle());
+
+		JournalComptable journal2 = daoProxy.getComptabiliteDao().getEcritureComptableByRef("VE-2016/00004").getJournal();
+
+		Assert.assertEquals("VE", journal2.getCode());
+		Assert.assertEquals("Vente", journal2.getLibelle());
+	}
+
+	@Test
+	public void ligneEcritureComptableToCompteComptableTest() throws NotFoundException
+	{
+		List<LigneEcritureComptable> list = daoProxy.getComptabiliteDao().getEcritureComptableByRef("AC-2016/00001").getListLigneEcriture();
+
+		LigneEcritureComptable ligneEcritureComptable = list.get(0);
+
+		Assert.assertTrue(ligneEcritureComptable.getCompteComptable().getNumero() == 606);
+
+		CompteComptable compteComptable = ligneEcritureComptable.getCompteComptable();
+
+		Assert.assertTrue(compteComptable.getNumero() == 606);
+		Assert.assertEquals("Achats non stockés de matières et fournitures", compteComptable.getLibelle());
+	}
+
+	/*
+	TESTS EN CRÉATION/ÉDITION ET SUPPRESSION
+	 */
+
+	private EcritureComptable createEcritureComptable()
+	{
+		List<JournalComptable> list = daoProxy.getComptabiliteDao().getListJournalComptable();
+
+		JournalComptable journalComptable = JournalComptable.getByCode(list, "VE");
+
+		/**/
+
+		EcritureComptable ecritureComptable = new EcritureComptable();
+
+		ecritureComptable.setJournal(journalComptable);
+		ecritureComptable.setLibelle("Test");
+		ecritureComptable.setDate(new Date());
+		ecritureComptable.setReference(ecritureComptable.getJournal().getCode() + "-" + simpleYearFormat.format(new Date()) + "/99999");
+
+		ecritureComptable.getListLigneEcriture().add(
+			new LigneEcritureComptable(
+				new CompteComptable(401),
+				"Test 1",
+				new BigDecimal(135),
+				null
+			)
+		);
+
+		ecritureComptable.getListLigneEcriture().add(
+			new LigneEcritureComptable(
+				new CompteComptable(411),
+				"Test 2",
+				null,
+				new BigDecimal(246)
+			)
+		);
+
+		return ecritureComptable;
+	}
+
+	@Test
+	public void insertEcritureComptableTest()
+	{
+		EcritureComptable ecritureComptable = createEcritureComptable();
+
+		daoProxy.getComptabiliteDao().insertEcritureComptable(ecritureComptable);
+
+		/**/
+
+		Assert.assertNotNull(ecritureComptable.getId());
+
+		daoProxy.getComptabiliteDao().deleteEcritureComptable(ecritureComptable.getId());
+	}
+
+	@Test
+	public void updateEcritureComptable() throws NotFoundException
+	{
+		EcritureComptable ecritureComptable = createEcritureComptable();
+
+		daoProxy.getComptabiliteDao().insertEcritureComptable(ecritureComptable);
+
+		int id = ecritureComptable.getId();
+		String reference = ecritureComptable.getReference();
+
+		/**/
+
+		ecritureComptable = daoProxy.getComptabiliteDao().getEcritureComptableByRef(reference);
+
+		ecritureComptable.setLibelle("Test BIS");
+
+		daoProxy.getComptabiliteDao().updateEcritureComptable(ecritureComptable);
+
+		/**/
+
+		ecritureComptable = daoProxy.getComptabiliteDao().getEcritureComptableByRef(reference);
+
+		Assert.assertEquals("Test BIS", ecritureComptable.getLibelle());
+
+		daoProxy.getComptabiliteDao().deleteEcritureComptable(id);
+	}
+
+	@Test
+	public void deleteEcritureComptable() throws NotFoundException
+	{
+		EcritureComptable ecritureComptable = createEcritureComptable();
+
+		daoProxy.getComptabiliteDao().insertEcritureComptable(ecritureComptable);
+
+		int id = ecritureComptable.getId();
+		String reference = ecritureComptable.getReference();
+
+		/**/
+
+		daoProxy.getComptabiliteDao().deleteEcritureComptable(id);
+
+		/**/
+
+		try
+		{
+			daoProxy.getComptabiliteDao().getEcritureComptableByRef(reference);
+
+			Assert.fail();
+		}
+		catch(NotFoundException e)
+		{
+			/* success */
+		}
+	}
+
+	private SequenceEcritureComptable createSequenceEcritureComptable()
+	{
+		SequenceEcritureComptable sequenceEcritureComptable = new SequenceEcritureComptable();
+
+		sequenceEcritureComptable.setJournalCode("AC");
+		sequenceEcritureComptable.setAnnee(2021);
+		sequenceEcritureComptable.setDerniereValeur(99);
+
+		return sequenceEcritureComptable;
+	}
+
+	@Test
+	public void insertSequenceEcritureComptableTest() throws NotFoundException
+	{
+		SequenceEcritureComptable sequenceEcritureComptable = createSequenceEcritureComptable();
+
+		daoProxy.getComptabiliteDao().insertSequenceEcritureComptable(sequenceEcritureComptable);
+
+		/**/
+
+		SequenceEcritureComptable lastSequenceEcritureComptable = daoProxy.getComptabiliteDao().getSequenceEcritureComptable("AC", 2021);
+
+		Assert.assertEquals("AC", sequenceEcritureComptable.getJournalCode());
+		Assert.assertTrue(lastSequenceEcritureComptable.getAnnee() == 2021);
+		Assert.assertTrue(lastSequenceEcritureComptable.getDerniereValeur() == 99);
+
+		daoProxy.getComptabiliteDao().deleteSequenceEcritureComptable("AC", 2021);
+	}
+
+	@Test
+	public void updateSequenceEcritureComptableTest() throws NotFoundException {
+
+		SequenceEcritureComptable sequenceEcritureComptable = createSequenceEcritureComptable();
+
+		daoProxy.getComptabiliteDao().insertSequenceEcritureComptable(sequenceEcritureComptable);
+
+		/**/
+
+		SequenceEcritureComptable lastSequenceEcritureComptable1 = daoProxy.getComptabiliteDao().getSequenceEcritureComptable("AC", 2021);
+
+		lastSequenceEcritureComptable1.setDerniereValeur(100);
+
+		daoProxy.getComptabiliteDao().updateSequenceEcritureComptable(lastSequenceEcritureComptable1);
+
+		/**/
+
+		SequenceEcritureComptable lastSequenceEcritureComptable2 = daoProxy.getComptabiliteDao().getSequenceEcritureComptable("AC", 2021);
+
+		Assert.assertEquals("AC", sequenceEcritureComptable.getJournalCode());
+		Assert.assertTrue(lastSequenceEcritureComptable2.getAnnee() == 2021);
+		Assert.assertTrue(lastSequenceEcritureComptable2.getDerniereValeur() == 100);
+
+		daoProxy.getComptabiliteDao().deleteSequenceEcritureComptable("AC", 2021);
+	}
+}
diff --git a/myerp-consumer/src/test/java/com/dummy/myerp/consumer/test/SpringAppTest.java b/myerp-consumer/src/test/java/com/dummy/myerp/consumer/test/SpringAppTest.java
new file mode 100644
index 0000000..62df429
--- /dev/null
+++ b/myerp-consumer/src/test/java/com/dummy/myerp/consumer/test/SpringAppTest.java
@@ -0,0 +1,33 @@
+package com.dummy.myerp.consumer.test;
+
+import com.dummy.myerp.consumer.dao.contrat.DaoProxy;
+import org.junit.Assert;
+import org.junit.Test;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.support.ClassPathXmlApplicationContext;
+
+public class SpringAppTest
+{
+	private static final String APPLICATION_CONTEXT_XML = "classpath:/com/dummy/myerp/consumer/applicationContext.xml";
+	private static final String TEST_APPLICATION_CONTEXT_XML = "classpath:/com/dummy/myerp/consumer/test/applicationContext.xml";
+
+	@Test
+	public void springAppTest()
+	{
+		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(APPLICATION_CONTEXT_XML);
+
+		DaoProxy daoProxy = (DaoProxy) applicationContext.getBean("DaoProxy");
+
+		Assert.assertNotNull(daoProxy);
+	}
+
+	@Test
+	public void springTestAppTest()
+	{
+		ApplicationContext applicationContext = new ClassPathXmlApplicationContext(TEST_APPLICATION_CONTEXT_XML);
+
+		DaoProxy daoProxy = (DaoProxy) applicationContext.getBean("DaoProxy");
+
+		Assert.assertNotNull(daoProxy);
+	}
+}
diff --git a/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/applicationContext.xml b/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/applicationContext.xml
new file mode 100644
index 0000000..6e8b47d
--- /dev/null
+++ b/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/applicationContext.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns="http://www.springframework.org/schema/beans"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
+
+    <import resource="classpath:/com/dummy/myerp/consumer/applicationContext.xml" />
+
+    <import resource="classpath:/com/dummy/myerp/consumer/test/dataSourceContext.xml" />
+
+</beans>
diff --git a/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/dataSourceContext.xml b/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/dataSourceContext.xml
new file mode 100644
index 0000000..942fd61
--- /dev/null
+++ b/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/dataSourceContext.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
+
+    <context:property-placeholder location="classpath:/com/dummy/myerp/consumer/test/database.properties"/>
+
+    <bean id="dataSourceMYERP" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
+        <property name="driverClassName" value="${myerp.datasource.driver}"/>
+        <property name="url" value="${myerp.datasource.url}"/>
+        <property name="username" value="${myerp.datasource.username}"/>
+        <property name="password" value="${myerp.datasource.password}"/>
+    </bean>
+
+</beans>
diff --git a/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/database.properties b/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/database.properties
new file mode 100644
index 0000000..2be3093
--- /dev/null
+++ b/myerp-consumer/src/test/resources/com/dummy/myerp/consumer/test/database.properties
@@ -0,0 +1,4 @@
+myerp.datasource.driver=org.postgresql.Driver
+myerp.datasource.url=jdbc:postgresql://nas.odier.xyz:5432/myerp
+myerp.datasource.username=myerp
+myerp.datasource.password=myerp
diff --git a/myerp-model/pom.xml b/myerp-model/pom.xml
new file mode 100644
index 0000000..6081ea5
--- /dev/null
+++ b/myerp-model/pom.xml
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <!-- =============================================================== -->
+    <!-- Project informations -->
+    <!-- =============================================================== -->
+    <!-- ===== Parent ===== -->
+    <parent>
+        <groupId>com.dummy.myerp</groupId>
+        <artifactId>myerp</artifactId>
+        <version>1.x.x-SNAPSHOT</version>
+        <relativePath>..</relativePath>
+    </parent>
+
+    <!-- ===== Maven ===== -->
+    <artifactId>myerp-model</artifactId>
+
+    <!-- ===== General information ===== -->
+    <name>${project.artifactId}</name>
+
+
+    <!-- =============================================================== -->
+    <!-- Distrubution management -->
+    <!-- =============================================================== -->
+    <distributionManagement>
+        <site>
+            <id>site</id>
+            <name>site-doc</name>
+            <url>file://${basedir}/../target/site-doc/${project.artifactId}/</url>
+        </site>
+    </distributionManagement>
+
+
+    <!-- =============================================================== -->
+    <!-- Properties -->
+    <!-- =============================================================== -->
+    <properties>
+    </properties>
+
+
+    <!-- =============================================================== -->
+    <!-- Dependencies -->
+    <!-- =============================================================== -->
+    <dependencies>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+        </dependency>
+
+        <!-- ===== Modules ===== -->
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>myerp-technical</artifactId>
+        </dependency>
+
+
+        <!-- ========== Test Dependencies ========== -->
+        <!-- ===== Tests ===== -->
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- ===== JSR 303 - Bean validation ===== -->
+        <!-- implementation -->
+        <dependency>
+            <groupId>org.hibernate</groupId>
+            <artifactId>hibernate-validator</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+
+    <!-- =============================================================== -->
+    <!-- Build -->
+    <!-- =============================================================== -->
+    <build>
+    </build>
+</project>
diff --git a/myerp-model/src/main/java/com/dummy/myerp/model/bean/CompteComptable.java b/myerp-model/src/main/java/com/dummy/myerp/model/bean/CompteComptable.java
new file mode 100644
index 0000000..116ff2e
--- /dev/null
+++ b/myerp-model/src/main/java/com/dummy/myerp/model/bean/CompteComptable.java
@@ -0,0 +1,89 @@
+package com.dummy.myerp.model.bean;
+
+
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.List;
+import java.util.Objects;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+
+
+/**
+ * Bean représentant un Compte Comptable
+ */
+
+@Getter
+@Setter
+public class CompteComptable {
+    // ==================== Attributs ====================
+    /** The Numero. */
+    @NotNull
+    private Integer numero;
+
+    /** The Libelle. */
+    @NotNull
+    @Size(min = 1, max = 150)
+    private String libelle;
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Instantiates a new Compte comptable.
+     */
+    public CompteComptable() {
+    }
+
+    /**
+     * Instantiates a new Compte comptable.
+     *
+     * @param pNumero the numero
+     */
+    public CompteComptable(Integer pNumero) {
+        numero = pNumero;
+    }
+
+    /**
+     * Instantiates a new Compte comptable.
+     *
+     * @param pNumero the numero
+     * @param pLibelle the libelle
+     */
+    public CompteComptable(Integer pNumero, String pLibelle) {
+        numero = pNumero;
+        libelle = pLibelle;
+    }
+
+    // ==================== Méthodes ====================
+    @Override
+    public String toString() {
+        final StringBuilder vStB = new StringBuilder(this.getClass().getSimpleName());
+        final String vSEP = ", ";
+        vStB.append("{")
+            .append("numero=").append(numero)
+            .append(vSEP).append("libelle='").append(libelle).append('\'')
+            .append("}");
+        return vStB.toString();
+    }
+
+
+    // ==================== Méthodes STATIC ====================
+    /**
+     * Renvoie le {@link CompteComptable} de numéro {@code pNumero} s'il est présent dans la liste
+     *
+     * @param pList la liste où chercher le {@link CompteComptable}
+     * @param pNumero le numero du {@link CompteComptable} à chercher
+     * @return {@link CompteComptable} ou {@code null}
+     */
+    public static CompteComptable getByNumero(List<? extends CompteComptable> pList, Integer pNumero) {
+        CompteComptable vRetour = null;
+        for (CompteComptable vBean : pList) {
+            if (vBean != null && Objects.equals(vBean.getNumero(), pNumero)) {
+                vRetour = vBean;
+                break;
+            }
+        }
+        return vRetour;
+    }
+}
diff --git a/myerp-model/src/main/java/com/dummy/myerp/model/bean/EcritureComptable.java b/myerp-model/src/main/java/com/dummy/myerp/model/bean/EcritureComptable.java
new file mode 100644
index 0000000..3f71de9
--- /dev/null
+++ b/myerp-model/src/main/java/com/dummy/myerp/model/bean/EcritureComptable.java
@@ -0,0 +1,106 @@
+package com.dummy.myerp.model.bean;
+
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import javax.validation.Valid;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Pattern;
+import javax.validation.constraints.Size;
+
+import lombok.Getter;
+import lombok.Setter;
+import org.apache.commons.lang3.StringUtils;
+
+
+/**
+ * Bean représentant une Écriture Comptable
+ */
+
+@Getter
+@Setter
+public class EcritureComptable {
+
+    public static final String REFERENCE_PATTERN = "(\\D{1,5})-(\\d{4})/(\\d{5})";
+
+    // ==================== Attributs ====================
+    /** The Id. */
+    private Integer id;
+    /** Journal comptable */
+    @NotNull private JournalComptable journal;
+    /** The Reference. */
+    @Pattern(regexp = REFERENCE_PATTERN) // Erreur sur l'expression régulière : \D au lieu de \d
+    private String reference;
+    /** The Date. */
+    @NotNull private Date date;
+
+    /** The Libelle. */
+    @NotNull
+    @Size(min = 1, max = 200)
+    private String libelle;
+
+    /** La liste des lignes d'écriture comptable. */
+    @Valid
+    @Size(min = 2)
+    private final List<LigneEcritureComptable> listLigneEcriture = new ArrayList<>();
+
+    /**
+     * Calcul et renvoie le total des montants au débit des lignes d'écriture
+     *
+     * @return {@link BigDecimal}, {@link BigDecimal#ZERO} si aucun montant au débit
+     */
+    public BigDecimal getTotalDebit() {
+        BigDecimal vRetour = BigDecimal.ZERO;
+        for (LigneEcritureComptable vLigneEcritureComptable : listLigneEcriture) {
+            if (vLigneEcritureComptable.getDebit() != null) {
+                vRetour = vRetour.add(vLigneEcritureComptable.getDebit());
+            }
+        }
+        return vRetour;
+    }
+
+    /**
+     * Calcul et renvoie le total des montants au crédit des lignes d'écriture
+     *
+     * @return {@link BigDecimal}, {@link BigDecimal#ZERO} si aucun montant au crédit
+     */
+    public BigDecimal getTotalCredit() {
+        BigDecimal vRetour = BigDecimal.ZERO;
+        for (LigneEcritureComptable vLigneEcritureComptable : listLigneEcriture) {
+            if (vLigneEcritureComptable.getCredit() != null) { // Correction getCredit au lieu de getDebit
+                vRetour = vRetour.add(vLigneEcritureComptable.getCredit()); // Correction getCredit au lieu de getDebit
+            }
+        }
+        return vRetour;
+    }
+
+    /**
+     * Renvoie si l'écriture est équilibrée (TotalDebit = TotalCrédit)
+     * @return boolean
+     */
+    public boolean isEquilibree() {
+        boolean vRetour = this.getTotalDebit().compareTo(getTotalCredit()) == 0; // il faut utiliser compareTo au lieu de equals
+        return vRetour;
+    }
+
+    // ==================== Méthodes ====================
+    @Override
+    public String toString() {
+        final StringBuilder vStB = new StringBuilder(this.getClass().getSimpleName());
+        final String vSEP = ", ";
+        vStB.append("{")
+            .append("id=").append(id)
+            .append(vSEP).append("journal=").append(journal)
+            .append(vSEP).append("reference='").append(reference).append('\'')
+            .append(vSEP).append("date=").append(date)
+            .append(vSEP).append("libelle='").append(libelle).append('\'')
+            .append(vSEP).append("totalDebit=").append(this.getTotalDebit().toPlainString())
+            .append(vSEP).append("totalCredit=").append(this.getTotalCredit().toPlainString())
+            .append(vSEP).append("listLigneEcriture=[\n")
+            .append(StringUtils.join(listLigneEcriture, "\n")).append("\n]")
+            .append("}");
+        return vStB.toString();
+    }
+}
diff --git a/myerp-model/src/main/java/com/dummy/myerp/model/bean/JournalComptable.java b/myerp-model/src/main/java/com/dummy/myerp/model/bean/JournalComptable.java
new file mode 100644
index 0000000..b0ebae2
--- /dev/null
+++ b/myerp-model/src/main/java/com/dummy/myerp/model/bean/JournalComptable.java
@@ -0,0 +1,81 @@
+package com.dummy.myerp.model.bean;
+
+import lombok.Getter;
+import lombok.Setter;
+
+import java.util.List;
+import java.util.Objects;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+
+
+/**
+ * Bean représentant un Journal Comptable
+ */
+
+@Getter
+@Setter
+public class JournalComptable {
+
+    // ==================== Attributs ====================
+    /** code */
+    @NotNull
+    @Size(min = 1, max = 5)
+    private String code;
+
+    /** libelle */
+    @NotNull
+    @Size(min = 1, max = 150)
+    private String libelle;
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Instantiates a new Journal comptable.
+     */
+    public JournalComptable() {
+    }
+
+    /**
+     * Instantiates a new Journal comptable.
+     *
+     * @param pCode the p code
+     * @param pLibelle the p libelle
+     */
+    public JournalComptable(String pCode, String pLibelle) {
+        code = pCode;
+        libelle = pLibelle;
+    }
+
+    // ==================== Méthodes ====================
+    @Override
+    public String toString() {
+        final StringBuilder vStB = new StringBuilder(this.getClass().getSimpleName());
+        final String vSEP = ", ";
+        vStB.append("{")
+            .append("code='").append(code).append('\'')
+            .append(vSEP).append("libelle='").append(libelle).append('\'')
+            .append("}");
+        return vStB.toString();
+    }
+
+
+    // ==================== Méthodes STATIC ====================
+    /**
+     * Renvoie le {@link JournalComptable} de code {@code pCode} s'il est présent dans la liste
+     *
+     * @param pList la liste où chercher le {@link JournalComptable}
+     * @param pCode le code du {@link JournalComptable} à chercher
+     * @return {@link JournalComptable} ou {@code null}
+     */
+    public static JournalComptable getByCode(List<? extends JournalComptable> pList, String pCode) {
+        JournalComptable vRetour = null;
+        for (JournalComptable vBean : pList) {
+            if (vBean != null && Objects.equals(vBean.getCode(), pCode)) {
+                vRetour = vBean;
+                break;
+            }
+        }
+        return vRetour;
+    }
+}
diff --git a/myerp-model/src/main/java/com/dummy/myerp/model/bean/LigneEcritureComptable.java b/myerp-model/src/main/java/com/dummy/myerp/model/bean/LigneEcritureComptable.java
new file mode 100644
index 0000000..4a91c02
--- /dev/null
+++ b/myerp-model/src/main/java/com/dummy/myerp/model/bean/LigneEcritureComptable.java
@@ -0,0 +1,73 @@
+package com.dummy.myerp.model.bean;
+
+import java.math.BigDecimal;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+
+import com.dummy.myerp.model.validation.constraint.MontantComptable;
+import lombok.Getter;
+import lombok.Setter;
+
+
+/**
+ * Bean représentant une Ligne d'écriture comptable.
+ */
+
+@Setter
+@Getter
+public class LigneEcritureComptable {
+
+    // ==================== Attributs ====================
+    /** Compte Comptable */
+    @NotNull
+    private CompteComptable compteComptable;
+
+    /** The Libelle. */
+    @Size(max = 200)
+    private String libelle;
+
+    /** The Debit. */
+    @MontantComptable
+    private BigDecimal debit;
+
+    /** The Credit. */
+    @MontantComptable
+    private BigDecimal credit;
+
+    // ==================== Constructeurs ====================
+    /**
+     * Instantiates a new Ligne ecriture comptable.
+     */
+    public LigneEcritureComptable() {
+    }
+
+    /**
+     * Instantiates a new Ligne ecriture comptable.
+     *
+     * @param pCompteComptable the Compte Comptable
+     * @param pLibelle the libelle
+     * @param pDebit the debit
+     * @param pCredit the credit
+     */
+    public LigneEcritureComptable(CompteComptable pCompteComptable, String pLibelle,
+                                  BigDecimal pDebit, BigDecimal pCredit) {
+        compteComptable = pCompteComptable;
+        libelle = pLibelle;
+        debit = pDebit;
+        credit = pCredit;
+    }
+
+    // ==================== Méthodes ====================
+    @Override
+    public String toString() {
+        final StringBuilder vStB = new StringBuilder(this.getClass().getSimpleName());
+        final String vSEP = ", ";
+        vStB.append("{")
+            .append("compteComptable=").append(compteComptable)
+            .append(vSEP).append("libelle='").append(libelle).append('\'')
+            .append(vSEP).append("debit=").append(debit)
+            .append(vSEP).append("credit=").append(credit)
+            .append("}");
+        return vStB.toString();
+    }
+}
diff --git a/myerp-model/src/main/java/com/dummy/myerp/model/bean/SequenceEcritureComptable.java b/myerp-model/src/main/java/com/dummy/myerp/model/bean/SequenceEcritureComptable.java
new file mode 100644
index 0000000..b01d928
--- /dev/null
+++ b/myerp-model/src/main/java/com/dummy/myerp/model/bean/SequenceEcritureComptable.java
@@ -0,0 +1,51 @@
+package com.dummy.myerp.model.bean;
+
+import lombok.Getter;
+import lombok.Setter;
+
+/**
+ * Bean représentant une séquence pour les références d'écriture comptable
+ */
+
+@Setter
+@Getter
+public class SequenceEcritureComptable {
+
+    // ==================== Attributs ====================
+    /** Le code du journal */
+    private String journalCode;
+    /** L'année */
+    private Integer annee;
+    /** La dernière valeur utilisée */
+    private Integer derniereValeur;
+
+    // ==================== Constructeurs ====================
+    /**
+     * Constructeur
+     */
+    public SequenceEcritureComptable() {
+    }
+
+    /**
+     * Constructeur
+     *
+     * @param pAnnee -
+     * @param pDerniereValeur -
+     */
+    public SequenceEcritureComptable(Integer pAnnee, Integer pDerniereValeur) {
+        annee = pAnnee;
+        derniereValeur = pDerniereValeur;
+    }
+
+    // ==================== Méthodes ====================
+    @Override
+    public String toString() {
+        final StringBuilder vStB = new StringBuilder(this.getClass().getSimpleName());
+        final String vSEP = ", ";
+        vStB.append("{")
+            .append("annee=").append(annee)
+            .append(vSEP).append("derniereValeur=").append(derniereValeur)
+            .append("}");
+        return vStB.toString();
+    }
+}
diff --git a/myerp-model/src/main/java/com/dummy/myerp/model/validation/constraint/MontantComptable.java b/myerp-model/src/main/java/com/dummy/myerp/model/validation/constraint/MontantComptable.java
new file mode 100644
index 0000000..0e29219
--- /dev/null
+++ b/myerp-model/src/main/java/com/dummy/myerp/model/validation/constraint/MontantComptable.java
@@ -0,0 +1,52 @@
+package com.dummy.myerp.model.validation.constraint;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import javax.validation.Constraint;
+import javax.validation.Payload;
+import javax.validation.constraints.Digits;
+
+
+/**
+ * Contrainte à apposer sur les attibuts de type "montant comptable"
+ *
+ *  Cette contrainte est composée de :
+ *  <ul>
+ *      <li>@{@link Digits}</li>
+ *  </ul>
+ *
+ *  Types supportés :
+ *  <ul>
+ *      <li>{@link java.math.BigDecimal}</li>
+ *  </ul>
+ */
+@Digits(integer = 13, fraction = 2)
+@Target({ ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE })
+@Retention(RetentionPolicy.RUNTIME)
+@Constraint(validatedBy = {})
+@Documented
+public @interface MontantComptable {
+
+    /** Message de la violation */
+    String message() default "Taux de TVA invalide";
+
+    /** Groupe de validation */
+    Class<?>[] groups() default {};
+
+    /** Payload */
+    Class<? extends Payload>[] payload() default {};
+
+    /**
+     * Interface permettant la déclaration de plusieurs {@link MontantComptable}
+     */
+    @Target({ ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE })
+    @Retention(RetentionPolicy.RUNTIME)
+    @Documented
+    @interface List {
+        /** List des {@link MontantComptable} */
+        MontantComptable[] value();
+    }
+}
diff --git a/myerp-model/src/main/resources/com/dummy/myerp/model/applicationContext.xml b/myerp-model/src/main/resources/com/dummy/myerp/model/applicationContext.xml
new file mode 100644
index 0000000..054822b
--- /dev/null
+++ b/myerp-model/src/main/resources/com/dummy/myerp/model/applicationContext.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
+
+    <!-- ========== Model ========== -->
+
+</beans>
diff --git a/myerp-model/src/test/java/com/dummy/myerp/model/test/CompteComptableTest.java b/myerp-model/src/test/java/com/dummy/myerp/model/test/CompteComptableTest.java
new file mode 100644
index 0000000..fd6e18b
--- /dev/null
+++ b/myerp-model/src/test/java/com/dummy/myerp/model/test/CompteComptableTest.java
@@ -0,0 +1,49 @@
+package com.dummy.myerp.model.test;
+
+import com.dummy.myerp.model.bean.CompteComptable;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class CompteComptableTest
+{
+    private List<CompteComptable> listCompteComptable = new ArrayList<>();
+
+    @Before
+    public void init()
+    {
+        listCompteComptable.add(new CompteComptable(1357, "Compte 1"));
+        listCompteComptable.add(new CompteComptable(2468, "Compte 2"));
+        listCompteComptable.add(new CompteComptable(null, "Compte 3"));
+    }
+
+    @Test
+    public void compteComptableTest()
+    {
+        Assert.assertEquals(listCompteComptable.get(0).toString(), "CompteComptable{numero=1357, libelle='Compte 1'}");
+
+        Assert.assertEquals(listCompteComptable.get(1).toString(), "CompteComptable{numero=2468, libelle='Compte 2'}");
+
+        Assert.assertEquals(listCompteComptable.get(2).toString(), "CompteComptable{numero=null, libelle='Compte 3'}");
+    }
+
+    @Test
+    public void getByNumeroTest()
+    {
+        CompteComptable compteComptable = CompteComptable.getByNumero(listCompteComptable,2468);
+
+        Assert.assertSame(compteComptable, listCompteComptable.get(1));
+    }
+
+    @Test
+    public void getByNumeroNullTest()
+    {
+        CompteComptable compteComptable = CompteComptable.getByNumero(listCompteComptable,null);
+
+        Assert.assertSame(compteComptable, listCompteComptable.get(2));
+    }
+}
\ No newline at end of file
diff --git a/myerp-model/src/test/java/com/dummy/myerp/model/test/EcritureComptableTest.java b/myerp-model/src/test/java/com/dummy/myerp/model/test/EcritureComptableTest.java
new file mode 100644
index 0000000..cfe1431
--- /dev/null
+++ b/myerp-model/src/test/java/com/dummy/myerp/model/test/EcritureComptableTest.java
@@ -0,0 +1,103 @@
+package com.dummy.myerp.model.test;
+
+import java.math.BigDecimal;
+
+import com.dummy.myerp.model.bean.CompteComptable;
+import com.dummy.myerp.model.bean.EcritureComptable;
+import com.dummy.myerp.model.bean.LigneEcritureComptable;
+import org.apache.commons.lang3.ObjectUtils;
+import org.junit.Assert;
+import org.junit.Test;
+
+
+public class EcritureComptableTest {
+
+    private LigneEcritureComptable createLigne(Integer pCompteComptableNumero, String pDebit, String pCredit) {
+        BigDecimal vDebit = pDebit == null ? null : new BigDecimal(pDebit);
+        BigDecimal vCredit = pCredit == null ? null : new BigDecimal(pCredit);
+
+        String vLibelle = ObjectUtils.defaultIfNull(vDebit, BigDecimal.ZERO).subtract(ObjectUtils.defaultIfNull(vCredit, BigDecimal.ZERO))
+                                                                            .toPlainString()
+        ;
+
+        LigneEcritureComptable vRetour = new LigneEcritureComptable(
+            new CompteComptable(pCompteComptableNumero),
+            vLibelle,
+            vDebit,
+            vCredit
+        );
+
+        return vRetour;
+    }
+
+    @Test
+    public void referenceFormatTest()
+    {
+        String pattern = EcritureComptable.REFERENCE_PATTERN;
+
+        EcritureComptable vEcriture = new EcritureComptable();
+
+        vEcriture.setReference("BQ-2016/00001");
+        Assert.assertTrue(vEcriture.getReference().matches(pattern));
+
+        vEcriture.setReference("B9-2016/00001");
+        Assert.assertFalse(vEcriture.getReference().matches(pattern));
+    }
+
+    @Test
+    public void getTotalDebitTest()
+    {
+        EcritureComptable vEcriture = new EcritureComptable();
+
+        vEcriture.setLibelle("Totaux");
+
+        vEcriture.getListLigneEcriture().add(this.createLigne(1, "300", null));
+        vEcriture.getListLigneEcriture().add(this.createLigne(1, "202.50", null));
+        vEcriture.getListLigneEcriture().add(this.createLigne(2, null, null));
+        vEcriture.getListLigneEcriture().add(this.createLigne(2, "300", null));
+
+        BigDecimal totalDebit = vEcriture.getTotalDebit();
+
+        Assert.assertTrue(totalDebit.compareTo( new BigDecimal(802.50)) == 0);
+    }
+
+    @Test
+    public void getTotalCreditTest()
+    {
+        EcritureComptable vEcriture = new EcritureComptable();
+
+        vEcriture.setLibelle("Totaux");
+
+        vEcriture.getListLigneEcriture().add(this.createLigne(1, null, "120"));
+        vEcriture.getListLigneEcriture().add(this.createLigne(1, null, "10"));
+        vEcriture.getListLigneEcriture().add(this.createLigne(2, null, "1"));
+        vEcriture.getListLigneEcriture().add(this.createLigne(2, null, null));
+
+        BigDecimal totalCredit = vEcriture.getTotalCredit();
+
+        Assert.assertTrue(totalCredit.compareTo( new BigDecimal(131)) == 0);
+    }
+
+    @Test
+    public void isEquilibree() {
+        EcritureComptable vEcriture = new EcritureComptable();
+
+        vEcriture.setLibelle("Equilibrée");
+
+        vEcriture.getListLigneEcriture().add(this.createLigne(1, "200.50", null));
+        vEcriture.getListLigneEcriture().add(this.createLigne(1, "100.50", "33"));
+        vEcriture.getListLigneEcriture().add(this.createLigne(2, null, "301"));
+        vEcriture.getListLigneEcriture().add(this.createLigne(2, "40", "7"));
+        Assert.assertTrue(vEcriture.toString(), vEcriture.isEquilibree());
+
+        vEcriture.getListLigneEcriture().clear();
+
+        vEcriture.setLibelle("Non équilibrée");
+
+        vEcriture.getListLigneEcriture().add(this.createLigne(1, "10", null));
+        vEcriture.getListLigneEcriture().add(this.createLigne(1, "20", "1"));
+        vEcriture.getListLigneEcriture().add(this.createLigne(2, null, "30"));
+        vEcriture.getListLigneEcriture().add(this.createLigne(2, "1", "2"));
+        Assert.assertFalse(vEcriture.toString(), vEcriture.isEquilibree());
+    }
+}
\ No newline at end of file
diff --git a/myerp-model/src/test/java/com/dummy/myerp/model/test/JournalComptableTest.java b/myerp-model/src/test/java/com/dummy/myerp/model/test/JournalComptableTest.java
new file mode 100644
index 0000000..01cc365
--- /dev/null
+++ b/myerp-model/src/test/java/com/dummy/myerp/model/test/JournalComptableTest.java
@@ -0,0 +1,37 @@
+package com.dummy.myerp.model.test;
+
+import com.dummy.myerp.model.bean.JournalComptable;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.*;
+
+
+public class JournalComptableTest
+{
+    private List<JournalComptable> listJournalComptable = new ArrayList<>();
+
+    @Before
+    public void init()
+    {
+        listJournalComptable.add(new JournalComptable("AA", "Consommables divers"));
+        listJournalComptable.add(new JournalComptable("BB", "Matériels divers"));
+    }
+
+    @Test
+    public void journalComptableTest()
+    {
+        Assert.assertEquals(listJournalComptable.get(0).toString(), "JournalComptable{code='AA', libelle='Consommables divers'}");
+
+        Assert.assertEquals(listJournalComptable.get(1).toString(), "JournalComptable{code='BB', libelle='Matériels divers'}");
+    }
+
+    @Test
+    public void getByCodeTest()
+    {
+        JournalComptable journalComptable = JournalComptable.getByCode(listJournalComptable, "BB");
+
+        Assert.assertSame(journalComptable, listJournalComptable.get(1));
+    }
+}
\ No newline at end of file
diff --git a/myerp-model/src/test/java/com/dummy/myerp/model/test/LigneEcritureComptableTest.java b/myerp-model/src/test/java/com/dummy/myerp/model/test/LigneEcritureComptableTest.java
new file mode 100644
index 0000000..7b505f5
--- /dev/null
+++ b/myerp-model/src/test/java/com/dummy/myerp/model/test/LigneEcritureComptableTest.java
@@ -0,0 +1,32 @@
+package com.dummy.myerp.model.test;
+
+import com.dummy.myerp.model.bean.CompteComptable;
+import com.dummy.myerp.model.bean.LigneEcritureComptable;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.math.BigDecimal;
+
+
+public class LigneEcritureComptableTest
+{
+    private LigneEcritureComptable ligneEcritureComptable;
+
+    @Before
+    public void init()
+    {
+        ligneEcritureComptable = new LigneEcritureComptable();
+
+        ligneEcritureComptable.setCompteComptable(new CompteComptable(666, "Consommables"));
+        ligneEcritureComptable.setLibelle("Rame papier");
+        ligneEcritureComptable.setDebit(new BigDecimal(100));
+        ligneEcritureComptable.setCredit(new BigDecimal(50));
+    }
+
+    @Test
+    public void ligneEcritureComptableTest()
+    {
+        Assert.assertEquals(ligneEcritureComptable.toString(), "LigneEcritureComptable{compteComptable=CompteComptable{numero=666, libelle='Consommables'}, libelle='Rame papier', debit=100, credit=50}");
+    }
+}
\ No newline at end of file
diff --git a/myerp-model/src/test/java/com/dummy/myerp/model/test/SequenceEcritureComptableTest.java b/myerp-model/src/test/java/com/dummy/myerp/model/test/SequenceEcritureComptableTest.java
new file mode 100644
index 0000000..38ebba5
--- /dev/null
+++ b/myerp-model/src/test/java/com/dummy/myerp/model/test/SequenceEcritureComptableTest.java
@@ -0,0 +1,27 @@
+package com.dummy.myerp.model.test;
+
+import com.dummy.myerp.model.bean.SequenceEcritureComptable;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+
+public class SequenceEcritureComptableTest
+{
+    private SequenceEcritureComptable sequenceEcritureComptable;
+
+    @Before
+    public void init()
+    {
+        sequenceEcritureComptable = new SequenceEcritureComptable();
+
+        sequenceEcritureComptable.setAnnee(2021);
+        sequenceEcritureComptable.setDerniereValeur(36500);
+    }
+
+    @Test
+    public void sequenceEcritureComptable()
+    {
+        Assert.assertEquals(sequenceEcritureComptable.toString(), "SequenceEcritureComptable{annee=2021, derniereValeur=36500}");
+    }
+}
\ No newline at end of file
diff --git a/myerp-technical/pom.xml b/myerp-technical/pom.xml
new file mode 100644
index 0000000..af34708
--- /dev/null
+++ b/myerp-technical/pom.xml
@@ -0,0 +1,125 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <!-- =============================================================== -->
+    <!-- Project informations -->
+    <!-- =============================================================== -->
+    <!-- ===== Parent ===== -->
+    <parent>
+        <groupId>com.dummy.myerp</groupId>
+        <artifactId>myerp</artifactId>
+        <version>1.x.x-SNAPSHOT</version>
+        <relativePath>..</relativePath>
+    </parent>
+
+    <!-- ===== Maven ===== -->
+    <artifactId>myerp-technical</artifactId>
+
+    <!-- ===== General information ===== -->
+    <name>${project.artifactId}</name>
+
+
+    <!-- =============================================================== -->
+    <!-- Distrubution management -->
+    <!-- =============================================================== -->
+    <distributionManagement>
+        <site>
+            <id>site</id>
+            <name>site-doc</name>
+            <url>file://${basedir}/../target/site-doc/${project.artifactId}/</url>
+        </site>
+    </distributionManagement>
+
+
+    <!-- =============================================================== -->
+    <!-- Properties -->
+    <!-- =============================================================== -->
+    <properties>
+    </properties>
+
+
+    <!-- =============================================================== -->
+    <!-- Dependencies -->
+    <!-- =============================================================== -->
+    <dependencies>
+        <!-- ===== Log4j ===== -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-api</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+        </dependency>
+        <!-- Commons Logging Bridge -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-jcl</artifactId>
+        </dependency>
+        <!-- Log4j 2 SLF4J Binding -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-slf4j-impl</artifactId>
+        </dependency>
+
+
+        <!-- ===== Apache commons ===== -->
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-lang3</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-collections4</artifactId>
+        </dependency>
+
+
+        <!-- ===== Spring IOC ===== -->
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-context</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework</groupId>
+            <artifactId>spring-beans</artifactId>
+        </dependency>
+
+
+        <!-- ===== JSR 303 - Bean validation ===== -->
+        <!-- interface -->
+        <dependency>
+            <groupId>javax.validation</groupId>
+            <artifactId>validation-api</artifactId>
+        </dependency>
+
+
+        <!-- ========== Test Dependencies ========== -->
+        <!-- ===== Tests ===== -->
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <!-- ===== JSR 303 - Bean validation ===== -->
+        <!-- implementation -->
+        <dependency>
+            <groupId>org.hibernate</groupId>
+            <artifactId>hibernate-validator</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+
+    <!-- =============================================================== -->
+    <!-- Build -->
+    <!-- =============================================================== -->
+    <build>
+    </build>
+</project>
diff --git a/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/FunctionalException.java b/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/FunctionalException.java
new file mode 100644
index 0000000..724044e
--- /dev/null
+++ b/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/FunctionalException.java
@@ -0,0 +1,40 @@
+package com.dummy.myerp.technical.exception;
+
+/**
+ * Classe des Exceptions Fonctionnelles
+ */
+public class FunctionalException extends Exception {
+
+    /** serialVersionUID */
+    private static final long serialVersionUID = 1L;
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Constructeur.
+     *
+     * @param pMessage -
+     */
+    public FunctionalException(String pMessage) {
+        super(pMessage);
+    }
+
+    /**
+     * Constructeur.
+     *
+     * @param pCause -
+     */
+    public FunctionalException(Throwable pCause) {
+        super(pCause);
+    }
+
+    /**
+     * Constructeur.
+     *
+     * @param pMessage -
+     * @param pCause -
+     */
+    public FunctionalException(String pMessage, Throwable pCause) {
+        super(pMessage, pCause);
+    }
+}
diff --git a/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/NotFoundException.java b/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/NotFoundException.java
new file mode 100644
index 0000000..2cd185c
--- /dev/null
+++ b/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/NotFoundException.java
@@ -0,0 +1,46 @@
+package com.dummy.myerp.technical.exception;
+
+
+/**
+ * Classe des Exception de type "Donnée non trouvée"
+ */
+public class NotFoundException extends Exception {
+
+    /** serialVersionUID */
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Constructeur.
+     */
+    public NotFoundException() {
+        super();
+    }
+
+    /**
+     * Constructeur.
+     *
+     * @param pMessage -
+     */
+    public NotFoundException(String pMessage) {
+        super(pMessage);
+    }
+
+    /**
+     * Constructeur.
+     *
+     * @param pCause -
+     */
+    public NotFoundException(Throwable pCause) {
+        super(pCause);
+    }
+
+    /**
+     * Constructeur.
+     *
+     * @param pMessage -
+     * @param pCause -
+     */
+    public NotFoundException(String pMessage, Throwable pCause) {
+        super(pMessage, pCause);
+    }
+}
diff --git a/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/TechnicalException.java b/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/TechnicalException.java
new file mode 100644
index 0000000..01d1ffd
--- /dev/null
+++ b/myerp-technical/src/main/java/com/dummy/myerp/technical/exception/TechnicalException.java
@@ -0,0 +1,40 @@
+package com.dummy.myerp.technical.exception;
+
+/**
+ * Classe des Exceptions Techniques
+ */
+public class TechnicalException extends Exception {
+
+    /** serialVersionUID */
+    private static final long serialVersionUID = 1L;
+
+
+    // ==================== Constructeurs ====================
+    /**
+     * Constructeur.
+     *
+     * @param pMessage -
+     */
+    public TechnicalException(String pMessage) {
+        super(pMessage);
+    }
+
+    /**
+     * Constructeur.
+     *
+     * @param pCause -
+     */
+    public TechnicalException(Throwable pCause) {
+        super(pCause);
+    }
+
+    /**
+     * Constructeur.
+     *
+     * @param pMessage -
+     * @param pCause -
+     */
+    public TechnicalException(String pMessage, Throwable pCause) {
+        super(pMessage, pCause);
+    }
+}
diff --git a/myerp-technical/src/main/java/com/dummy/myerp/technical/util/spring/NullFactoryBean.java b/myerp-technical/src/main/java/com/dummy/myerp/technical/util/spring/NullFactoryBean.java
new file mode 100644
index 0000000..b4cd448
--- /dev/null
+++ b/myerp-technical/src/main/java/com/dummy/myerp/technical/util/spring/NullFactoryBean.java
@@ -0,0 +1,48 @@
+package com.dummy.myerp.technical.util.spring;
+
+import org.springframework.beans.factory.FactoryBean;
+
+
+/**
+ * {@link FactoryBean} permettant de déclarer des Beans d'une classe spécifique et valant <code>null</code>.
+ *
+ * @param <T> Classe de l'objet construit
+ */
+public class NullFactoryBean<T> implements FactoryBean<T> {
+
+    /** Classe de l'objet construit */
+    private final Class<T> objectType;
+
+    /**
+     * Constructeur.
+     *
+     * @param pObjectType -
+     */
+    public NullFactoryBean(Class<T> pObjectType) {
+        this.objectType = pObjectType;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public T getObject() throws Exception {
+        return null;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public Class<T> getObjectType() {
+        return objectType;
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public boolean isSingleton() {
+        return false;
+    }
+}
diff --git a/myerp-technical/src/main/resources/com/dummy/myerp/technical/applicationContext.xml b/myerp-technical/src/main/resources/com/dummy/myerp/technical/applicationContext.xml
new file mode 100644
index 0000000..8db2cfd
--- /dev/null
+++ b/myerp-technical/src/main/resources/com/dummy/myerp/technical/applicationContext.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xmlns="http://www.springframework.org/schema/beans"
+       xsi:schemaLocation="http://www.springframework.org/schema/beans
+                           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
+
+</beans>
diff --git a/myerp-technical/src/main/resources/log4j2.xml b/myerp-technical/src/main/resources/log4j2.xml
new file mode 100644
index 0000000..4d465ce
--- /dev/null
+++ b/myerp-technical/src/main/resources/log4j2.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration xmlns="http://logging.apache.org/log4j/2.0/config">
+    <Appenders>
+        <Console name="console" target="SYSTEM_OUT">
+            <PatternLayout pattern="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
+        </Console>
+    </Appenders>
+    <Loggers>
+        <Root level="WARN">
+            <AppenderRef ref="console"/>
+        </Root>
+    </Loggers>
+</Configuration>
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..e67716d
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,563 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <!-- =============================================================== -->
+    <!-- Project informations -->
+    <!-- =============================================================== -->
+    <!-- ===== Maven ===== -->
+    <groupId>com.dummy.myerp</groupId>
+    <artifactId>myerp</artifactId>
+    <version>1.x.x-SNAPSHOT</version>
+    <packaging>pom</packaging>
+
+    <!-- ===== General information ===== -->
+    <name>MyERP</name>
+    <description>
+        ERP sur-mesure pour Dummy...
+    </description>
+    <url>http://www.dummy.com/projects/myerp</url>
+
+    <!-- ===== Organization ===== -->
+    <organization>
+        <name>Dummy</name>
+        <url>http://www.dummy.com</url>
+    </organization>
+
+
+    <!-- =============================================================== -->
+    <!-- Distrubution management -->
+    <!-- =============================================================== -->
+    <distributionManagement>
+        <site>
+            <id>site</id>
+            <name>site-doc</name>
+            <url>file://${project.build.directory}/site-doc/</url>
+        </site>
+    </distributionManagement>
+
+
+    <!-- =============================================================== -->
+    <!-- Properties -->
+    <!-- =============================================================== -->
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <java.version>1.8</java.version>
+        <maven.build.timestamp.format>dd/MM/yyyy</maven.build.timestamp.format>
+        <buildTime>${maven.build.timestamp}</buildTime>
+
+        <!-- ===== Application properties ===== -->
+        <application.name>MyERP</application.name>
+
+        <!-- ===== Version properties ===== -->
+        <log4j.version>2.8.1</log4j.version>
+        <spring.version>4.3.7.RELEASE</spring.version>
+
+        <!-- ===== Sonar properties ===== -->
+        <sonar.projectKey>P9</sonar.projectKey>
+        <sonar.moduleKey>${project.artifactId}</sonar.moduleKey>
+        <sonar.host.url>https://sonar.odier.xyz</sonar.host.url>
+        <sonar.login>6b1f83c83d650a43251d69a514fff808335af15f</sonar.login>
+        <sonar.language>java</sonar.language>
+
+    </properties>
+
+
+    <!-- =============================================================== -->
+    <!-- Modules -->
+    <!-- =============================================================== -->
+    <modules>
+        <module>myerp-technical</module>
+        <module>myerp-model</module>
+        <module>myerp-consumer</module>
+        <module>myerp-business</module>
+    </modules>
+
+
+    <!-- =============================================================== -->
+    <!-- Profiles -->
+    <!-- =============================================================== -->
+    <profiles>
+        <!-- Profile utilisé par le plugin m2e d'Eclipse -->
+        <profile>
+            <id>m2e</id>
+            <activation>
+                <property>
+                    <name>m2e.version</name>
+                </property>
+            </activation>
+            <properties>
+                <maven.build.timestamp>DD/MM/YYYY</maven.build.timestamp>
+            </properties>
+        </profile>
+
+        <!-- Profile utilisé pour lancer les tests d'intégration de la couche Business -->
+        <profile>
+            <id>test-business</id>
+        </profile>
+
+        <!-- Profile utilisé pour lancer les tests d'intégration de la couche Consumer -->
+        <profile>
+            <id>test-consumer</id>
+        </profile>
+    </profiles>
+
+
+    <!-- =============================================================== -->
+    <!-- Repositories -->
+    <!-- =============================================================== -->
+    <repositories>
+        <!-- ===== Project local repository ===== -->
+        <repository>
+            <id>project.local</id>
+            <name>project.local</name>
+            <url>file://${basedir}/../src/lib/</url>
+            <releases>
+                <updatePolicy>always</updatePolicy>
+            </releases>
+        </repository>
+    </repositories>
+
+
+    <!-- =============================================================== -->
+    <!-- Dependency managment -->
+    <!-- =============================================================== -->
+    <dependencyManagement>
+        <dependencies>
+            <!-- ========== Modules ========== -->
+            <dependency>
+                <groupId>${project.groupId}</groupId>
+                <artifactId>myerp-technical</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>${project.groupId}</groupId>
+                <artifactId>myerp-model</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>${project.groupId}</groupId>
+                <artifactId>myerp-consumer</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>${project.groupId}</groupId>
+                <artifactId>myerp-business</artifactId>
+                <version>${project.version}</version>
+            </dependency>
+
+
+            <!-- ========== Libraries ========== -->
+            <!-- ===== Lombok ===== -->
+            <dependency>
+                <groupId>org.projectlombok</groupId>
+                <artifactId>lombok</artifactId>
+                <version>1.18.20</version>
+            </dependency>
+            <!-- ===== Log4j ===== -->
+            <dependency>
+                <groupId>org.apache.logging.log4j</groupId>
+                <artifactId>log4j-api</artifactId>
+                <version>${log4j.version}</version>
+            </dependency>
+            <dependency>
+                <groupId>org.apache.logging.log4j</groupId>
+                <artifactId>log4j-core</artifactId>
+                <version>${log4j.version}</version>
+            </dependency>
+            <!-- Commons Logging Bridge -->
+            <dependency>
+                <groupId>org.apache.logging.log4j</groupId>
+                <artifactId>log4j-jcl</artifactId>
+                <version>${log4j.version}</version>
+            </dependency>
+            <!-- Log4j 2 SLF4J Binding -->
+            <dependency>
+                <groupId>org.apache.logging.log4j</groupId>
+                <artifactId>log4j-slf4j-impl</artifactId>
+                <version>${log4j.version}</version>
+            </dependency>
+
+            <!-- ===== JSR 303 - Bean validation ===== -->
+            <!-- interface -->
+            <dependency>
+                <groupId>javax.validation</groupId>
+                <artifactId>validation-api</artifactId>
+                <version>1.1.0.Final</version>
+            </dependency>
+            <!-- implementation -->
+            <dependency>
+                <groupId>org.hibernate</groupId>
+                <artifactId>hibernate-validator</artifactId>
+                <version>4.2.0.Final</version>
+            </dependency>
+
+            <!-- ===== Apache Commons ===== -->
+            <dependency>
+                <groupId>org.apache.commons</groupId>
+                <artifactId>commons-collections4</artifactId>
+                <version>4.1</version>
+            </dependency>
+            <dependency>
+                <groupId>org.apache.commons</groupId>
+                <artifactId>commons-lang3</artifactId>
+                <version>3.5</version>
+            </dependency>
+
+            <!-- ===== Spring IOC ===== -->
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-core</artifactId>
+                <version>${spring.version}</version>
+                <scope>compile</scope>
+            </dependency>
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-context</artifactId>
+                <version>${spring.version}</version>
+                <scope>compile</scope>
+            </dependency>
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-beans</artifactId>
+                <version>${spring.version}</version>
+                <scope>compile</scope>
+            </dependency>
+
+            <!-- ===== Spring JDBC/Tx ===== -->
+            <!-- spring-tx : transaction, JCA, DAO -->
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-tx</artifactId>
+                <version>${spring.version}</version>
+                <scope>compile</scope>
+            </dependency>
+            <!-- spring-jdbc : commons-exceptions, datasource management -->
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-jdbc</artifactId>
+                <version>${spring.version}</version>
+                <scope>compile</scope>
+            </dependency>
+
+            <!-- ===== Database ===== -->
+            <!-- DB Connection pool -->
+            <dependency>
+                <groupId>org.apache.commons</groupId>
+                <artifactId>commons-dbcp2</artifactId>
+                <version>2.1.1</version>
+            </dependency>
+            <!-- JDBC Drivers : PostgreSQL -->
+            <dependency>
+                <groupId>org.postgresql</groupId>
+                <artifactId>postgresql</artifactId>
+                <version>9.4.1212</version>
+                <scope>runtime</scope>
+            </dependency>
+
+            <!-- ===== Test unitaires ===== -->
+            <dependency>
+                <groupId>junit</groupId>
+                <artifactId>junit</artifactId>
+                <version>4.12</version>
+                <scope>test</scope>
+            </dependency>
+        </dependencies>
+    </dependencyManagement>
+
+
+    <!-- =============================================================== -->
+    <!-- Dependencies -->
+    <!-- =============================================================== -->
+    <dependencies>
+    </dependencies>
+
+
+    <!-- =============================================================== -->
+    <!-- Build -->
+    <!-- =============================================================== -->
+    <build>
+        <!-- =============================================================== -->
+        <!-- pluginManagement -->
+        <!-- =============================================================== -->
+        <pluginManagement>
+            <plugins>
+                <!-- ===== Java compilation ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-compiler-plugin</artifactId>
+                    <version>3.6.1</version>
+                    <configuration>
+                        <source>${java.version}</source>
+                        <target>${java.version}</target>
+                    </configuration>
+                </plugin>
+
+                <!-- ===== "Filtrage/Parsing" des resources ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-resources-plugin</artifactId>
+                    <version>3.0.2</version>
+                    <configuration>
+                        <encoding>${project.build.sourceEncoding}</encoding>
+                    </configuration>
+                </plugin>
+
+                <!-- ===== Gestion des dépendences ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-dependency-plugin</artifactId>
+                    <version>3.0</version>
+                </plugin>
+
+                <!-- ===== Création des JAR ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-jar-plugin</artifactId>
+                    <version>3.0.2</version>
+                </plugin>
+
+                <!-- ===== Création des WAR (webapp) ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-war-plugin</artifactId>
+                    <version>3.0.0</version>
+                </plugin>
+
+                <!-- ===== Assemblage d'éléments (ex: génération du ZIP de déploiement des batches) ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-assembly-plugin</artifactId>
+                    <version>3.0.0</version>
+                </plugin>
+
+                <!-- ===== Déploiement des artifacts ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-deploy-plugin</artifactId>
+                    <version>2.8.2</version>
+                </plugin>
+
+                <!-- ===== Test / Reporting ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-surefire-plugin</artifactId>
+                    <version>2.20</version>
+                </plugin>
+
+                <!-- ===== Plugin d'analyse de code Checkstyle ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-checkstyle-plugin</artifactId>
+                    <version>2.17</version>
+                    <configuration>
+                        <configLocation>src/build/checkstyle.xml</configLocation>
+                    </configuration>
+                </plugin>
+
+                <!-- ===== Plugin de génération d'un site de documentation du projet ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-site-plugin</artifactId>
+                    <version>3.6</version>
+                    <inherited>true</inherited>
+                    <configuration>
+                        <locales>fr</locales>
+                        <relativizeDecorationLinks>false</relativizeDecorationLinks>
+                    </configuration>
+                </plugin>
+
+                <!-- ===== Project info ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-project-info-reports-plugin</artifactId>
+                    <version>2.9</version>
+                </plugin>
+
+                <!-- ===== Javadoc ===== -->
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-javadoc-plugin</artifactId>
+                    <version>2.10.4</version>
+                </plugin>
+
+                <!-- ===== Aide au constructions particulières ===== -->
+                <!-- Ex : Ajout de répertoire de sources générées en tant que source d'un module -->
+                <plugin>
+                    <groupId>org.codehaus.mojo</groupId>
+                    <artifactId>build-helper-maven-plugin</artifactId>
+                    <version>1.10</version>
+                </plugin>
+            </plugins>
+        </pluginManagement>
+        <plugins>
+            <plugin>
+                <groupId>org.jacoco</groupId>
+                <artifactId>jacoco-maven-plugin</artifactId>
+                <version>0.8.6</version>
+                <executions>
+                    <execution>
+                        <goals>
+                            <goal>prepare-agent</goal>
+                        </goals>
+                    </execution>
+                    <execution>
+                        <id>AA</id>
+                        <phase>pre-integration-test</phase>
+                        <goals>
+                            <goal>prepare-agent-integration</goal>
+                        </goals>
+                    </execution>
+                    <execution>
+                        <id>BB</id>
+                        <phase>prepare-package</phase>
+                        <goals>
+                            <goal>report</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+
+
+    <!-- =============================================================== -->
+    <!-- Reporting -->
+    <!-- =============================================================== -->
+    <reporting>
+        <excludeDefaults>true</excludeDefaults>
+        <outputDirectory>${project.build.directory}/site</outputDirectory>
+        <plugins>
+            <!-- ===== Génération du site de documentation de base avec les "rapports génériques" ===== -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-project-info-reports-plugin</artifactId>
+                <version>2.9</version>
+                <configuration>
+                    <dependencyDetailsEnabled>false</dependencyDetailsEnabled>
+                </configuration>
+                <reportSets>
+                    <reportSet>
+                        <reports>
+                            <report>index</report>
+                            <report>summary</report>
+                            <report>license</report>
+                            <report>modules</report>
+                            <report>dependencies</report>
+                            <report>dependency-convergence</report>
+                            <report>dependency-management</report>
+                            <report>plugin-management</report>
+                            <report>plugins</report>
+                            <report>project-team</report>
+                            <report>scm</report>
+                        </reports>
+                    </reportSet>
+                </reportSets>
+            </plugin>
+
+            <!-- ===== Création du rapport des tests unitaires (JUnit) ===== -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-report-plugin</artifactId>
+                <version>2.20</version>
+                <configuration>
+                    <linkXRef>false</linkXRef>
+                </configuration>
+                <reportSets>
+                    <!-- reportSet par défaut, exécuté dans tous les modules (non-aggregate reports) -->
+                    <reportSet>
+                        <reports>
+                            <!-- goal "report-only" afin de ne pas relancer les tests unitaires
+                                 car normalement ils ont été lancés par la phase compile -->
+                            <report>report-only</report>
+                        </reports>
+                    </reportSet>
+                    <reportSet>
+                        <!-- reportSet d'agrégation des rapports des sous-modules -->
+                        <id>aggregate</id>
+                        <!-- don't run aggregate in child modules -->
+                        <inherited>false</inherited>
+                        <reports>
+                            <!-- goal "report-only" afin de ne pas relancer les tests unitaires
+                                 car normalement ils ont été lancés par la phase compile -->
+                            <report>report-only</report>
+                        </reports>
+                        <configuration>
+                            <aggregate>true</aggregate>
+                        </configuration>
+                    </reportSet>
+                </reportSets>
+            </plugin>
+
+            <!-- ===== Génération de la Javadoc ===== -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-javadoc-plugin</artifactId>
+                <version>2.10.4</version>
+                <configuration>
+                    <!-- Définition de l'exécutable de javadoc à utiliser si on ne prend pas celui par défaut -->
+                    <!--javadocExecutable>/opt/java/jdk8/bin/javadoc</javadocExecutable -->
+                    <quiet>true</quiet>
+                    <locale>fr</locale>
+                    <!-- Définition des "groupes" de javadoc -->
+                    <groups>
+                        <group>
+                            <title>Application</title>
+                            <packages>com.dummy.myerp*</packages>
+                        </group>
+                    </groups>
+                </configuration>
+                <reportSets>
+                    <!-- reportSet par défaut, exécuté dans tous les modules (non-aggregate reports) -->
+                    <reportSet>
+                        <reports>
+                            <report>javadoc</report>
+                        </reports>
+                    </reportSet>
+                    <!-- reportSet d'agrégation des rapports des sous-modules -->
+                    <reportSet>
+                        <id>aggregate</id>
+                        <!-- don't run aggregate in child modules -->
+                        <inherited>false</inherited>
+                        <reports>
+                            <report>aggregate</report>
+                        </reports>
+                    </reportSet>
+                </reportSets>
+            </plugin>
+
+            <!-- ===== Création du rapport d'analyse du code par Checkstyle ===== -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-checkstyle-plugin</artifactId>
+                <version>2.17</version>
+                <configuration>
+                    <configLocation>src/build/checkstyle.xml</configLocation>
+                    <linkXRef>false</linkXRef>
+                </configuration>
+                <reportSets>
+                    <!-- reportSet par défaut, exécuté dans tous les modules (non-aggregate reports) -->
+                    <reportSet>
+                        <reports>
+                            <report>checkstyle</report>
+                        </reports>
+                    </reportSet>
+                    <!-- reportSet d'agrégation des rapports des sous-modules -->
+                    <reportSet>
+                        <id>checkstyle-aggregate</id>
+                        <!-- don't run aggregate in child modules -->
+                        <inherited>false</inherited>
+                        <configuration>
+                            <!-- Skip checktyle execution will only scan the outputFile. -->
+                            <skipExec>true</skipExec>
+                        </configuration>
+                        <reports>
+                            <report>checkstyle-aggregate</report>
+                        </reports>
+                    </reportSet>
+                </reportSets>
+            </plugin>
+        </plugins>
+    </reporting>
+</project>
diff --git a/src/build/checkstyle.xml b/src/build/checkstyle.xml
new file mode 100644
index 0000000..e8a02c7
--- /dev/null
+++ b/src/build/checkstyle.xml
@@ -0,0 +1,625 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
+        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
+<module name="Checker">
+    <property name="severity" value="warning"/>
+    <module name="TreeWalker">
+        <property name="tabWidth" value="4"/>
+        <module name="FileContentsHolder"/>
+
+
+        <module name="PackageName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_PACKAGE"/>
+            <property name="id" value="NOM_PACKAGE"/>
+            <property name="severity" value="error"/>
+            <property name="format" value="^([a-z][a-zA-Z0-9]*)+(\.[a-z][a-zA-Z0-9]*)*$"/>
+        </module>
+
+
+        <module name="TypeName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_CLASSE"/>
+            <property name="id" value="NOM_CLASSE"/>
+            <property name="severity" value="error"/>
+            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
+            <property name="tokens" value="CLASS_DEF"/>
+        </module>
+
+
+        <module name="MethodName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_METHODE"/>
+            <property name="id" value="NOM_METHODE"/>
+            <property name="severity" value="error"/>
+            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
+        </module>
+
+
+        <module name="ParameterName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_PARAM"/>
+            <property name="id" value="NOM_PARAM"/>
+            <property name="severity" value="info"/>
+            <property name="format" value="^p[A-Z][a-zA-Z0-9]*$"/>
+        </module>
+
+
+        <module name="LocalVariableName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_LOCAL_VAR"/>
+            <property name="id" value="NOM_LOCAL_VAR"/>
+            <property name="severity" value="info"/>
+            <property name="format" value="^v[A-Z][a-zA-Z0-9]*$"/>
+        </module>
+        <module name="LocalFinalVariableName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_LOCAL_VAR"/>
+            <property name="id" value="NOM_LOCAL_VAR"/>
+            <property name="severity" value="info"/>
+            <property name="format" value="^v[A-Z][a-zA-Z0-9]*$"/>
+        </module>
+
+
+        <module name="MemberName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_ATTRIBUT"/>
+            <property name="id" value="NOM_ATTRIBUT"/>
+            <property name="severity" value="error"/>
+            <property name="format" value="^[a-zA-Z0-9]*$"/>
+        </module>
+        <module name="StaticVariableName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_ATTRIBUT"/>
+            <property name="id" value="NOM_ATTRIBUT"/>
+            <property name="severity" value="error"/>
+            <property name="format" value="^[a-zA-Z0-9]*$"/>
+        </module>
+        <module name="ConstantName">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NOM_ATTRIBUT"/>
+            <property name="id" value="NOM_ATTRIBUT"/>
+            <property name="severity" value="error"/>
+            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
+        </module>
+
+
+        <module name="HiddenField">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_MASQUER_ATTRIBUT"/>
+            <property name="id" value="NO_MASQUER_ATTRIBUT"/>
+            <property name="severity" value="error"/>
+            <property name="ignoreConstructorParameter" value="true"/>
+            <property name="ignoreSetter" value="true"/>
+        </module>
+
+
+        <module name="LineLength">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="severity" value="error"/>
+            <property name="ignorePattern" value="^import\s"/>
+            <property name="max" value="120"/>
+            <property name="tabWidth" value="4"/>
+        </module>
+        <module name="WhitespaceAround">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="severity" value="error"/>
+            <property name="tokens"
+                      value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,DO_WHILE,EQUAL,GE,GT,LAND,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,TYPE_EXTENSION_AND"/>
+        </module>
+        <module name="NoWhitespaceBefore">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="severity" value="error"/>
+        </module>
+        <module name="LeftCurly">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="severity" value="error"/>
+            <property name="maxLineLength" value="120"/>
+        </module>
+        <module name="RightCurly">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="severity" value="error"/>
+        </module>
+        <module name="ParenPad">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="severity" value="error"/>
+        </module>
+        <module name="WhitespaceAfter">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="severity" value="error"/>
+            <property name="tokens" value="COMMA"/>
+        </module>
+        <module name="Indentation">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="severity" value="error"/>
+            <property name="basicOffset" value="4"/>
+            <property name="caseIndent" value="4"/>
+            <property name="lineWrappingIndentation" value="0"/>
+        </module>
+        <module name="RegexpSinglelineJava">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMATAGE_CODE"/>
+            <property name="id" value="FORMATAGE_CODE"/>
+            <property name="message" value="Utiliser des espaces pour l''indentation."/>
+            <property name="severity" value="error"/>
+            <property name="format" value="^ *\t+"/>
+        </module>
+
+
+        <module name="NeedBraces">
+            <metadata name="net.sf.eclipsecs.core.comment" value="BLOC_ACCOL_OBLIG"/>
+            <property name="severity" value="warning"/>
+            <property name="id" value="BLOC_ACCOL_OBLIG"/>
+        </module>
+
+
+        <module name="RegexpSinglelineJava">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NBR_INSTR_LIGNE"/>
+            <property name="id" value="NBR_INSTR_LIGNE"/>
+            <property name="message" value="Mettre une seule instruction par ligne."/>
+            <property name="severity" value="info"/>
+            <property name="format" value="^[\s\t]*(?!for )([^\s\t]+.*;.*;)"/>
+            <property name="ignoreComments" value="true"/>
+        </module>
+
+
+        <module name="MultipleVariableDeclarations">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_DECLAR_MULTI"/>
+            <property name="id" value="NO_DECLAR_MULTI"/>
+            <property name="severity" value="info"/>
+        </module>
+
+
+        <module name="ArrayTypeStyle">
+            <metadata name="net.sf.eclipsecs.core.comment" value="DECLAR_TABLEAU"/>
+            <property name="severity" value="warning"/>
+            <property name="id" value="DECLAR_TABLEAU"/>
+        </module>
+
+
+        <module name="UpperEll">
+            <metadata name="net.sf.eclipsecs.core.comment" value="LONG_SUFFIX_GRAND_L"/>
+            <property name="severity" value="warning"/>
+            <property name="id" value="LONG_SUFFIX_GRAND_L"/>
+        </module>
+
+
+        <module name="JavadocType">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMAT_JAVADOC"/>
+            <property name="id" value="FORMAT_JAVADOC"/>
+            <property name="severity" value="error"/>
+            <!-- property name="authorFormat" value=".+"/ -->
+        </module>
+        <module name="JavadocVariable">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMAT_JAVADOC"/>
+            <property name="id" value="FORMAT_JAVADOC"/>
+            <property name="severity" value="error"/>
+        </module>
+        <module name="JavadocMethod">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMAT_JAVADOC"/>
+            <property name="id" value="FORMAT_JAVADOC"/>
+            <property name="severity" value="error"/>
+            <property name="allowUndeclaredRTE" value="true"/>
+            <property name="allowThrowsTagsForSubclasses" value="true"/>
+            <property name="allowMissingPropertyJavadoc" value="true"/>
+            <property name="suppressLoadErrors" value="true"/>
+        </module>
+        <module name="JavadocStyle">
+            <metadata name="net.sf.eclipsecs.core.comment" value="FORMAT_JAVADOC"/>
+            <property name="id" value="FORMAT_JAVADOC"/>
+            <property name="severity" value="error"/>
+            <property name="checkEmptyJavadoc" value="true"/>
+            <property name="checkFirstSentence" value="false"/>
+            <property name="tokens" value="INTERFACE_DEF,CLASS_DEF,METHOD_DEF,CTOR_DEF"/>
+        </module>
+
+
+        <module name="JavaNCSS">
+            <metadata name="net.sf.eclipsecs.core.comment" value="TAUX_DOCUMENTATION"/>
+            <property name="id" value="TAUX_DOCUMENTATION"/>
+            <property name="severity" value="info"/>
+            <property name="methodMaximum" value="50"/>
+            <property name="fileMaximum" value="1500"/>
+        </module>
+
+
+        <module name="ClassDataAbstractionCoupling">
+            <metadata name="net.sf.eclipsecs.core.comment" value="COUPLAGE_CLASSE"/>
+            <property name="id" value="COUPLAGE_CLASSE"/>
+            <property name="severity" value="info"/>
+        </module>
+        <module name="ClassFanOutComplexity">
+            <metadata name="net.sf.eclipsecs.core.comment" value="COUPLAGE_CLASSE"/>
+            <property name="id" value="COUPLAGE_CLASSE"/>
+            <property name="severity" value="info"/>
+        </module>
+
+
+        <!-- Hors du TreeWalker
+      <module name="FileLength">
+        <metadata name="net.sf.eclipsecs.core.comment" value="LONG_FICHIER"/>
+        <property name="id" value="LONG_FICHIER"/>
+        <property name="severity" value="info"/>
+        <property name="max" value="2000"/>
+      </module>
+      -->
+
+
+        <module name="MethodLength">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CPLX_METHODE"/>
+            <property name="id" value="CPLX_METHODE"/>
+            <property name="severity" value="warning"/>
+            <property name="max" value="150"/>
+        </module>
+        <module name="ExecutableStatementCount">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CPLX_METHODE"/>
+            <property name="id" value="CPLX_METHODE"/>
+            <property name="severity" value="warning"/>
+            <property name="max" value="30"/>
+            <property name="tokens" value="INSTANCE_INIT,STATIC_INIT,METHOD_DEF,CTOR_DEF"/>
+        </module>
+        <module name="CyclomaticComplexity">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CPLX_METHODE"/>
+            <property name="id" value="CPLX_METHODE"/>
+            <property name="severity" value="warning"/>
+            <property name="max" value="10"/>
+        </module>
+        <module name="NestedIfDepth">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CPLX_METHODE"/>
+            <property name="id" value="CPLX_METHODE"/>
+            <property name="severity" value="warning"/>
+            <property name="max" value="3"/>
+        </module>
+        <module name="ParameterNumber">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CPLX_METHODE"/>
+            <property name="id" value="CPLX_METHODE"/>
+            <property name="severity" value="warning"/>
+            <property name="max" value="7"/>
+            <property name="tokens" value="METHOD_DEF"/>
+        </module>
+        <module name="NPathComplexity">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CPLX_METHODE"/>
+            <property name="id" value="CPLX_METHODE"/>
+            <property name="severity" value="warning"/>
+            <property name="max" value="200"/>
+        </module>
+
+
+        <module name="BooleanExpressionComplexity">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CPLX_EXPR_BOOL"/>
+            <property name="id" value="CPLX_EXPR_BOOL"/>
+            <property name="severity" value="error"/>
+            <property name="max" value="6"/>
+        </module>
+
+
+        <module name="InnerAssignment">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_ASSIGN_MULTI"/>
+            <property name="severity" value="warning"/>
+            <property name="id" value="NO_ASSIGN_MULTI"/>
+        </module>
+
+
+        <module name="RegexpSinglelineJava">
+            <metadata name="net.sf.eclipsecs.core.comment" value="OPER_INCR_SEUL"/>
+            <property name="id" value="OPER_INCR_SEUL"/>
+            <property name="message" value="Les opérateurs ''++'' et ''--'' doivent être utilisés seuls."/>
+            <property name="severity" value="error"/>
+            <property name="format"
+                      value="([^a-zA-Z0-9_\s\t;]+[\s\t]*[a-zA-Z0-9_]+(\+|-){2})|(; [a-zA-Z0-9_]+(\+|-){2}[^\)]+.*$)|(^[\s\t]*[a-zA-Z0-9_]+(\+|-){2}[^;]+.*$)|([a-zA-Z0-9_]+(\+|-){2}[\s\t]*$)"/>
+            <property name="ignoreComments" value="true"/>
+        </module>
+        <module name="RegexpSinglelineJava">
+            <metadata name="net.sf.eclipsecs.core.comment" value="OPER_INCR_SEUL"/>
+            <property name="id" value="OPER_INCR_SEUL"/>
+            <property name="message" value="Les opérateurs ''++'' et ''--'' doivent être utilisés seuls."/>
+            <property name="severity" value="error"/>
+            <property name="format"
+                      value="(.+(\+|-){2}[a-zA-Z0-9_]+)|((\+|-){2}[a-zA-Z0-9_]+[^;]+.*$)|(^(\+|-){2}[a-zA-Z0-9_]+$)"/>
+            <property name="ignoreComments" value="true"/>
+        </module>
+
+
+        <module name="NestedTryDepth">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_TRY_IMBRIQ"/>
+            <property name="id" value="NO_TRY_IMBRIQ"/>
+            <property name="severity" value="warning"/>
+            <property name="max" value="0"/>
+        </module>
+
+
+        <module name="AvoidNestedBlocks">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_BLOC_ANONYM"/>
+            <property name="id" value="NO_BLOC_ANONYM"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="FallThrough">
+            <metadata name="net.sf.eclipsecs.core.comment" value="SWITCH_BREAK_OBLIG"/>
+            <property name="severity" value="warning"/>
+            <property name="id" value="SWITCH_BREAK_OBLIG"/>
+        </module>
+
+
+        <module name="MissingSwitchDefault">
+            <metadata name="net.sf.eclipsecs.core.comment" value="SWITCH_DEFAULT_OBLIG"/>
+            <property name="id" value="SWITCH_DEFAULT_OBLIG"/>
+            <property name="severity" value="error"/>
+        </module>
+        <module name="DefaultComesLast">
+            <metadata name="net.sf.eclipsecs.core.comment" value="SWITCH_DEFAULT_OBLIG"/>
+            <property name="id" value="SWITCH_DEFAULT_OBLIG"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="RegexpSinglelineJava">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_CONTINUE"/>
+            <property name="id" value="NO_CONTINUE"/>
+            <property name="message" value="L''instruction ''continue'' est interdite."/>
+            <property name="severity" value="error"/>
+            <property name="format" value="\bcontinue\b"/>
+            <property name="ignoreComments" value="true"/>
+        </module>
+
+
+        <module name="ModifiedControlVariable">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_MODIF_INDICE_BOUCLE"/>
+            <property name="id" value="NO_MODIF_INDICE_BOUCLE"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="ReturnCount">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NBR_RETURN_MAX"/>
+            <property name="id" value="NBR_RETURN_MAX"/>
+            <property name="severity" value="warning"/>
+            <property name="max" value="1"/>
+        </module>
+
+
+        <module name="CovariantEquals">
+            <metadata name="net.sf.eclipsecs.core.comment" value="REDEF_EQUALS_OBJ"/>
+            <property name="id" value="REDEF_EQUALS_OBJ"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="SuperClone">
+            <metadata name="net.sf.eclipsecs.core.comment" value="REDEF_CLONE_APPEL_SUPERCLONE"/>
+            <property name="id" value="REDEF_CLONE_APPEL_SUPERCLONE"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="EqualsHashCode">
+            <metadata name="net.sf.eclipsecs.core.comment" value="REDEF_EQUALS_REDEF_HASHCODE"/>
+            <property name="id" value="REDEF_EQUALS_REDEF_HASHCODE"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="InnerAssignment">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_ASSIGN_APPEL_COND"/>
+            <property name="id" value="NO_ASSIGN_APPEL_COND"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="ParameterAssignment">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_ASSIGN_PARAM"/>
+            <property name="id" value="NO_ASSIGN_PARAM"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="EmptyBlock">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_CATCH_VIDE"/>
+            <property name="id" value="NO_CATCH_VIDE"/>
+            <property name="option" value="text"/>
+            <property name="tokens" value="LITERAL_CATCH"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="IllegalCatch">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_CATCH_TYPE_EXCEPT"/>
+            <property name="id" value="NO_CATCH_TYPE_EXCEPT"/>
+            <property name="severity" value="warning"/>
+            <property name="illegalClassNames"
+                      value="java.lang.Exception, java.lang.Error, java.lang.RuntimeException, java.lang.Throwable"/>
+        </module>
+
+
+        <module name="IllegalCatch">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CATCH_THROWABLE"/>
+            <property name="id" value="CATCH_THROWABLE"/>
+            <property name="severity" value="error"/>
+            <property name="illegalClassNames" value="java.lang.Exception, java.lang.Error"/>
+            <message key="illegal.catch" value="Faire un catch de ''java.lang.Throwable'' au lieu de ''{0}''"/>
+        </module>
+
+
+        <module name="RegexpSinglelineJava">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_SYSTEM_PRINT"/>
+            <property name="id" value="NO_SYSTEM_PRINT"/>
+            <property name="message" value="L''utilisation des ''System.out.print...'' est interdite."/>
+            <property name="severity" value="error"/>
+            <property name="format" value="\bSystem\.out\.print"/>
+            <property name="ignoreComments" value="true"/>
+        </module>
+        <module name="RegexpSinglelineJava">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_SYSTEM_PRINT"/>
+            <property name="id" value="NO_SYSTEM_PRINT"/>
+            <property name="message" value="L''utilisation des ''exception.printStackTrace(...)'' est interdite."/>
+            <property name="severity" value="error"/>
+            <property name="format" value="\.printStackTrace\("/>
+            <property name="ignoreComments" value="true"/>
+        </module>
+
+
+        <module name="UnusedImports">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_IMPORT_INUTIL"/>
+            <property name="id" value="NO_IMPORT_INUTIL"/>
+            <property name="severity" value="error"/>
+        </module>
+        <module name="AvoidStarImport">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_IMPORT_INUTIL"/>
+            <property name="id" value="NO_IMPORT_INUTIL"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <module name="RedundantImport">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_IMPORT_REDONDANT"/>
+            <property name="id" value="NO_IMPORT_REDONDANT"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="MagicNumber">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NUMERIC_CONST_OBLIG"/>
+            <property name="id" value="NUMERIC_CONST_OBLIG"/>
+            <property name="severity" value="error"/>
+            <property name="ignoreNumbers" value="-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10"/>
+            <property name="ignoreAnnotation" value="true"/>
+        </module>
+
+
+        <module name="EmptyBlock">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_BLOC_VIDE"/>
+            <property name="id" value="NO_BLOC_VIDE"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="EmptyStatement">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_INSTR_VIDE"/>
+            <property name="id" value="NO_INSTR_VIDE"/>
+            <property name="severity" value="error"/>
+        </module>
+
+
+        <!-- N'est plus disponible dans Checkstyle 6.2 -->
+        <!--
+        <module name="RedundantThrows">
+          <metadata name="net.sf.eclipsecs.core.comment" value="NO_THROWS_INUTIL"/>
+          <property name="id" value="NO_THROWS_INUTIL"/>
+          <property name="severity" value="error"/>
+          <property name="suppressLoadErrors" value="true"/>
+        </module>
+        -->
+
+
+        <module name="SimplifyBooleanExpression">
+            <metadata name="net.sf.eclipsecs.core.comment" value="SIMPL_EXPR_BOOL"/>
+            <property name="id" value="SIMPL_EXPR_BOOL"/>
+            <property name="severity" value="warning"/>
+        </module>
+        <module name="SimplifyBooleanReturn">
+            <metadata name="net.sf.eclipsecs.core.comment" value="SIMPL_EXPR_BOOL"/>
+            <property name="id" value="SIMPL_EXPR_BOOL"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="IllegalImport">
+            <metadata name="net.sf.eclipsecs.core.comment" value="IMPORT_INTERDIT"/>
+            <property name="id" value="IMPORT_INTERDIT"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="IllegalType">
+            <metadata name="net.sf.eclipsecs.core.comment" value="DECLAR_TYPE_INTERDIT"/>
+            <property name="id" value="DECLAR_TYPE_INTERDIT"/>
+            <property name="tokens" value="METHOD_DEF,PARAMETER_DEF,VARIABLE_DEF"/>
+            <property name="format" value="^$"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="MissingCtor">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CONSTR_OBLIG"/>
+            <property name="id" value="CONSTR_OBLIG"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="HideUtilityClassConstructor">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_CLAS_UTIL_CONSTR_PUBLIC"/>
+            <property name="id" value="NO_CLAS_UTIL_CONSTR_PUBLIC"/>
+            <property name="severity" value="info"/>
+        </module>
+
+
+        <module name="FinalClass">
+            <metadata name="net.sf.eclipsecs.core.comment" value="CLASSE_FINAL"/>
+            <property name="id" value="CLASSE_FINAL"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="VisibilityModifier">
+            <metadata name="net.sf.eclipsecs.core.comment" value="ENCAPSULER_ATTR"/>
+            <property name="id" value="ENCAPSULER_ATTR"/>
+            <property name="severity" value="error"/>
+            <property name="protectedAllowed" value="true"/>
+        </module>
+
+
+        <module name="ModifierOrder">
+            <metadata name="net.sf.eclipsecs.core.comment" value="ORDRE_MODIFIER"/>
+            <property name="id" value="ORDRE_MODIFIER"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="InterfaceIsType">
+            <metadata name="net.sf.eclipsecs.core.comment" value="NO_CONST_SEUL_INTERFACE"/>
+            <property name="id" value="NO_CONST_SEUL_INTERFACE"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="TodoComment">
+            <metadata name="net.sf.eclipsecs.core.comment" value="UTIL_TODO"/>
+            <property name="id" value="UTIL_TODO"/>
+            <property name="format" value="\b((?i:todo))\b"/>
+            <property name="severity" value="warning"/>
+        </module>
+
+
+        <module name="RegexpSinglelineJava">
+            <metadata name="net.sf.eclipsecs.core.comment" value="DEROGATION_CS"/>
+            <property name="severity" value="info"/>
+            <property name="id" value="DEROGATION_CS"/>
+            <property name="format" value="(\{\{)?DEROGATION_CS(_NEXT|_PREV)?\(([^\)]+)\) \:"/>
+            <property name="message" value="Utilisation du système de Dérogation CheckStyle."/>
+        </module>
+    </module>
+    <module name="Translation"/>
+    <module name="FileLength">
+        <metadata name="net.sf.eclipsecs.core.comment" value="LONG_FICHIER"/>
+        <property name="id" value="LONG_FICHIER"/>
+        <property name="severity" value="info"/>
+        <property name="max" value="2000"/>
+    </module>
+    <module name="SuppressionCommentFilter">
+        <property name="offCommentFormat" value="\{\{DEROGATION_CS\(([^\)]+)\) \:"/>
+        <property name="onCommentFormat" value="\}\}DEROGATION_CS\((([^\)]+))\)"/>
+        <property name="checkFormat" value="$1"/>
+    </module>
+    <module name="SuppressWithNearbyCommentFilter">
+        <property name="commentFormat" value="DEROGATION_CS\(([^\)]+)\) \:"/>
+        <property name="checkFormat" value="$1"/>
+    </module>
+    <module name="SuppressWithNearbyCommentFilter">
+        <property name="commentFormat" value="DEROGATION_CS_NEXT\(([^\)]+)\) \:"/>
+        <property name="checkFormat" value="$1"/>
+        <property name="influenceFormat" value="1"/>
+    </module>
+    <module name="SuppressWithNearbyCommentFilter">
+        <property name="commentFormat" value="DEROGATION_CS_PREV\(([^\)]+)\) \:"/>
+        <property name="checkFormat" value="$1"/>
+        <property name="influenceFormat" value="-1"/>
+    </module>
+</module>
diff --git a/src/site/resources/doc/fichierDocExemple.txt b/src/site/resources/doc/fichierDocExemple.txt
new file mode 100644
index 0000000..e7d54de
--- /dev/null
+++ b/src/site/resources/doc/fichierDocExemple.txt
@@ -0,0 +1 @@
+Fichier de documentation d'exemple
\ No newline at end of file
diff --git a/src/site/site.xml b/src/site/site.xml
new file mode 100644
index 0000000..3ef8b43
--- /dev/null
+++ b/src/site/site.xml
@@ -0,0 +1,57 @@
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/DECORATION/1.7.0"
+         xsi:schemaLocation="http://maven.apache.org/DECORATION/1.7.0 http://maven.apache.org/xsd/decoration-1.7.0.xsd">
+
+  <!-- utilisation du template de site fluido -->
+  <skin>
+    <groupId>org.apache.maven.skins</groupId>
+    <artifactId>maven-fluido-skin</artifactId>
+    <version>1.6</version>
+  </skin>
+
+  <bannerLeft>
+    <name>${project.name}</name>
+    <src>img/logo-app.png</src>
+    <!--
+    <href>${project.url}</href>
+    -->
+  </bannerLeft>
+
+  <bannerRight>
+    <name>${project.organization.name}</name>
+    <src>img/logo-client.png</src>
+    <!--
+    <href>${project.organization.url}</href>
+    -->
+  </bannerRight>
+
+
+  <publishDate position="right"/>
+  <version position="right"/>
+
+  <body>
+
+  	<breadcrumbs>
+      <item name="Accueil" href="index.html"/>
+    </breadcrumbs>
+
+    <menu name="Informations">
+      <item name="Introduction" href="index.html"/>
+    </menu>
+
+    <menu name="Documentations">
+    	<item name="Document Exemple 1" href="doc/fichierDocExemple.txt"/>
+    </menu>
+
+
+	<menu ref="parent" inherit="top"/>
+    <menu ref="reports" inherit="top"/>
+    <menu ref="modules" inherit="top"/>
+
+    <links>
+    	<item name="MyERP" href="http://www.dummy.com/myerp"/>
+    </links>
+
+    <footer>All rights reserved to ${project.organization.name}</footer>
+
+  </body>
+</project>
